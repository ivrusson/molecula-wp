/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/preact/dist/preact.module.js":
/*!***************************************************!*\
  !*** ./node_modules/preact/dist/preact.module.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => /* binding */ O,
/* harmony export */   "hydrate": () => /* binding */ S,
/* harmony export */   "createElement": () => /* binding */ v,
/* harmony export */   "h": () => /* binding */ v,
/* harmony export */   "Fragment": () => /* binding */ p,
/* harmony export */   "createRef": () => /* binding */ y,
/* harmony export */   "isValidElement": () => /* binding */ l,
/* harmony export */   "Component": () => /* binding */ d,
/* harmony export */   "cloneElement": () => /* binding */ q,
/* harmony export */   "createContext": () => /* binding */ B,
/* harmony export */   "toChildArray": () => /* binding */ b,
/* harmony export */   "__u": () => /* binding */ L,
/* harmony export */   "options": () => /* binding */ n
/* harmony export */ });
var n,
    l,
    u,
    i,
    t,
    o,
    r,
    f = {},
    e = [],
    c = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;

function s(n, l) {
  for (var u in l) n[u] = l[u];

  return n;
}

function a(n) {
  var l = n.parentNode;
  l && l.removeChild(n);
}

function v(n, l, u) {
  var i,
      t,
      o,
      r = arguments,
      f = {};

  for (o in l) "key" == o ? i = l[o] : "ref" == o ? t = l[o] : f[o] = l[o];

  if (arguments.length > 3) for (u = [u], o = 3; o < arguments.length; o++) u.push(r[o]);
  if (null != u && (f.children = u), "function" == typeof n && null != n.defaultProps) for (o in n.defaultProps) void 0 === f[o] && (f[o] = n.defaultProps[o]);
  return h(n, f, i, t, null);
}

function h(l, u, i, t, o) {
  var r = {
    type: l,
    props: u,
    key: i,
    ref: t,
    __k: null,
    __: null,
    __b: 0,
    __e: null,
    __d: void 0,
    __c: null,
    __h: null,
    constructor: void 0,
    __v: null == o ? ++n.__v : o
  };
  return null != n.vnode && n.vnode(r), r;
}

function y() {
  return {
    current: null
  };
}

function p(n) {
  return n.children;
}

function d(n, l) {
  this.props = n, this.context = l;
}

function _(n, l) {
  if (null == l) return n.__ ? _(n.__, n.__.__k.indexOf(n) + 1) : null;

  for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;

  return "function" == typeof n.type ? _(n) : null;
}

function w(n) {
  var l, u;

  if (null != (n = n.__) && null != n.__c) {
    for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) {
      n.__e = n.__c.base = u.__e;
      break;
    }

    return w(n);
  }
}

function k(l) {
  (!l.__d && (l.__d = !0) && u.push(l) && !g.__r++ || t !== n.debounceRendering) && ((t = n.debounceRendering) || i)(g);
}

function g() {
  for (var n; g.__r = u.length;) n = u.sort(function (n, l) {
    return n.__v.__b - l.__v.__b;
  }), u = [], n.some(function (n) {
    var l, u, i, t, o, r, f;
    n.__d && (r = (o = (l = n).__v).__e, (f = l.__P) && (u = [], (i = s({}, o)).__v = o.__v + 1, t = $(f, o, i, l.__n, void 0 !== f.ownerSVGElement, null != o.__h ? [r] : null, u, null == r ? _(o) : r, o.__h), j(u, o), t != r && w(o)));
  });
}

function m(n, l, u, i, t, o, r, c, s, v) {
  var y,
      d,
      w,
      k,
      g,
      m,
      b,
      A = i && i.__k || e,
      P = A.length;

  for (s == f && (s = null != r ? r[0] : P ? _(i, 0) : null), u.__k = [], y = 0; y < l.length; y++) if (null != (k = u.__k[y] = null == (k = l[y]) || "boolean" == typeof k ? null : "string" == typeof k || "number" == typeof k ? h(null, k, null, null, k) : Array.isArray(k) ? h(p, {
    children: k
  }, null, null, null) : null != k.__e || null != k.__c ? h(k.type, k.props, k.key, null, k.__v) : k)) {
    if (k.__ = u, k.__b = u.__b + 1, null === (w = A[y]) || w && k.key == w.key && k.type === w.type) A[y] = void 0;else for (d = 0; d < P; d++) {
      if ((w = A[d]) && k.key == w.key && k.type === w.type) {
        A[d] = void 0;
        break;
      }

      w = null;
    }
    g = $(n, k, w = w || f, t, o, r, c, s, v), (d = k.ref) && w.ref != d && (b || (b = []), w.ref && b.push(w.ref, null, k), b.push(d, k.__c || g, k)), null != g ? (null == m && (m = g), s = x(n, k, w, A, r, g, s), v || "option" != u.type ? "function" == typeof u.type && (u.__d = s) : n.value = "") : s && w.__e == s && s.parentNode != n && (s = _(w));
  }

  if (u.__e = m, null != r && "function" != typeof u.type) for (y = r.length; y--;) null != r[y] && a(r[y]);

  for (y = P; y--;) null != A[y] && L(A[y], A[y]);

  if (b) for (y = 0; y < b.length; y++) I(b[y], b[++y], b[++y]);
}

function b(n, l) {
  return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function (n) {
    b(n, l);
  }) : l.push(n)), l;
}

function x(n, l, u, i, t, o, r) {
  var f, e, c;
  if (void 0 !== l.__d) f = l.__d, l.__d = void 0;else if (t == u || o != r || null == o.parentNode) n: if (null == r || r.parentNode !== n) n.appendChild(o), f = null;else {
    for (e = r, c = 0; (e = e.nextSibling) && c < i.length; c += 2) if (e == o) break n;

    n.insertBefore(o, r), f = r;
  }
  return void 0 !== f ? f : o.nextSibling;
}

function A(n, l, u, i, t) {
  var o;

  for (o in u) "children" === o || "key" === o || o in l || C(n, o, null, u[o], i);

  for (o in l) t && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || C(n, o, l[o], u[o], i);
}

function P(n, l, u) {
  "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || c.test(l) ? u : u + "px";
}

function C(n, l, u, i, t) {
  var o, r, f;
  if (t && "className" == l && (l = "class"), "style" === l) {
    if ("string" == typeof u) n.style.cssText = u;else {
      if ("string" == typeof i && (n.style.cssText = i = ""), i) for (l in i) u && l in u || P(n.style, l, "");
      if (u) for (l in u) i && u[l] === i[l] || P(n.style, l, u[l]);
    }
  } else "o" === l[0] && "n" === l[1] ? (o = l !== (l = l.replace(/Capture$/, "")), (r = l.toLowerCase()) in n && (l = r), l = l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, f = o ? N : z, u ? i || n.addEventListener(l, f, o) : n.removeEventListener(l, f, o)) : "list" !== l && "tagName" !== l && "form" !== l && "type" !== l && "size" !== l && "download" !== l && "href" !== l && !t && l in n ? n[l] = null == u ? "" : u : "function" != typeof u && "dangerouslySetInnerHTML" !== l && (l !== (l = l.replace(/xlink:?/, "")) ? null == u || !1 === u ? n.removeAttributeNS("http://www.w3.org/1999/xlink", l.toLowerCase()) : n.setAttributeNS("http://www.w3.org/1999/xlink", l.toLowerCase(), u) : null == u || !1 === u && !/^ar/.test(l) ? n.removeAttribute(l) : n.setAttribute(l, u));
}

function z(l) {
  this.l[l.type + !1](n.event ? n.event(l) : l);
}

function N(l) {
  this.l[l.type + !0](n.event ? n.event(l) : l);
}

function T(n, l, u) {
  var i, t;

  for (i = 0; i < n.__k.length; i++) (t = n.__k[i]) && (t.__ = n, t.__e && ("function" == typeof t.type && t.__k.length > 1 && T(t, l, u), l = x(u, t, t, n.__k, null, t.__e, l), "function" == typeof n.type && (n.__d = l)));
}

function $(l, u, i, t, o, r, f, e, c) {
  var a,
      v,
      h,
      y,
      _,
      w,
      k,
      g,
      b,
      x,
      A,
      P = u.type;

  if (void 0 !== u.constructor) return null;
  null != i.__h && (c = i.__h, e = u.__e = i.__e, u.__h = null, r = [e]), (a = n.__b) && a(u);

  try {
    n: if ("function" == typeof P) {
      if (g = u.props, b = (a = P.contextType) && t[a.__c], x = a ? b ? b.props.value : a.__ : t, i.__c ? k = (v = u.__c = i.__c).__ = v.__E : ("prototype" in P && P.prototype.render ? u.__c = v = new P(g, x) : (u.__c = v = new d(g, x), v.constructor = P, v.render = M), b && b.sub(v), v.props = g, v.state || (v.state = {}), v.context = x, v.__n = t, h = v.__d = !0, v.__h = []), null == v.__s && (v.__s = v.state), null != P.getDerivedStateFromProps && (v.__s == v.state && (v.__s = s({}, v.__s)), s(v.__s, P.getDerivedStateFromProps(g, v.__s))), y = v.props, _ = v.state, h) null == P.getDerivedStateFromProps && null != v.componentWillMount && v.componentWillMount(), null != v.componentDidMount && v.__h.push(v.componentDidMount);else {
        if (null == P.getDerivedStateFromProps && g !== y && null != v.componentWillReceiveProps && v.componentWillReceiveProps(g, x), !v.__e && null != v.shouldComponentUpdate && !1 === v.shouldComponentUpdate(g, v.__s, x) || u.__v === i.__v) {
          v.props = g, v.state = v.__s, u.__v !== i.__v && (v.__d = !1), v.__v = u, u.__e = i.__e, u.__k = i.__k, v.__h.length && f.push(v), T(u, e, l);
          break n;
        }

        null != v.componentWillUpdate && v.componentWillUpdate(g, v.__s, x), null != v.componentDidUpdate && v.__h.push(function () {
          v.componentDidUpdate(y, _, w);
        });
      }
      v.context = x, v.props = g, v.state = v.__s, (a = n.__r) && a(u), v.__d = !1, v.__v = u, v.__P = l, a = v.render(v.props, v.state, v.context), v.state = v.__s, null != v.getChildContext && (t = s(s({}, t), v.getChildContext())), h || null == v.getSnapshotBeforeUpdate || (w = v.getSnapshotBeforeUpdate(y, _)), A = null != a && a.type == p && null == a.key ? a.props.children : a, m(l, Array.isArray(A) ? A : [A], u, i, t, o, r, f, e, c), v.base = u.__e, u.__h = null, v.__h.length && f.push(v), k && (v.__E = v.__ = null), v.__e = !1;
    } else null == r && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = H(i.__e, u, i, t, o, r, f, c);

    (a = n.diffed) && a(u);
  } catch (l) {
    u.__v = null, (c || null != r) && (u.__e = e, u.__h = !!c, r[r.indexOf(e)] = null), n.__e(l, u, i);
  }

  return u.__e;
}

function j(l, u) {
  n.__c && n.__c(u, l), l.some(function (u) {
    try {
      l = u.__h, u.__h = [], l.some(function (n) {
        n.call(u);
      });
    } catch (l) {
      n.__e(l, u.__v);
    }
  });
}

function H(n, l, u, i, t, o, r, c) {
  var s,
      a,
      v,
      h,
      y,
      p = u.props,
      d = l.props;
  if (t = "svg" === l.type || t, null != o) for (s = 0; s < o.length; s++) if (null != (a = o[s]) && ((null === l.type ? 3 === a.nodeType : a.localName === l.type) || n == a)) {
    n = a, o[s] = null;
    break;
  }

  if (null == n) {
    if (null === l.type) return document.createTextNode(d);
    n = t ? document.createElementNS("http://www.w3.org/2000/svg", l.type) : document.createElement(l.type, d.is && {
      is: d.is
    }), o = null, c = !1;
  }

  if (null === l.type) p === d || c && n.data === d || (n.data = d);else {
    if (null != o && (o = e.slice.call(n.childNodes)), v = (p = u.props || f).dangerouslySetInnerHTML, h = d.dangerouslySetInnerHTML, !c) {
      if (null != o) for (p = {}, y = 0; y < n.attributes.length; y++) p[n.attributes[y].name] = n.attributes[y].value;
      (h || v) && (h && (v && h.__html == v.__html || h.__html === n.innerHTML) || (n.innerHTML = h && h.__html || ""));
    }

    A(n, d, p, t, c), h ? l.__k = [] : (s = l.props.children, m(n, Array.isArray(s) ? s : [s], l, u, i, "foreignObject" !== l.type && t, o, r, f, c)), c || ("value" in d && void 0 !== (s = d.value) && (s !== n.value || "progress" === l.type && !s) && C(n, "value", s, p.value, !1), "checked" in d && void 0 !== (s = d.checked) && s !== n.checked && C(n, "checked", s, p.checked, !1));
  }
  return n;
}

function I(l, u, i) {
  try {
    "function" == typeof l ? l(u) : l.current = u;
  } catch (l) {
    n.__e(l, i);
  }
}

function L(l, u, i) {
  var t, o, r;

  if (n.unmount && n.unmount(l), (t = l.ref) && (t.current && t.current !== l.__e || I(t, null, u)), i || "function" == typeof l.type || (i = null != (o = l.__e)), l.__e = l.__d = void 0, null != (t = l.__c)) {
    if (t.componentWillUnmount) try {
      t.componentWillUnmount();
    } catch (l) {
      n.__e(l, u);
    }
    t.base = t.__P = null;
  }

  if (t = l.__k) for (r = 0; r < t.length; r++) t[r] && L(t[r], u, i);
  null != o && a(o);
}

function M(n, l, u) {
  return this.constructor(n, u);
}

function O(l, u, i) {
  var t, r, c;
  n.__ && n.__(l, u), r = (t = i === o) ? null : i && i.__k || u.__k, l = v(p, null, [l]), c = [], $(u, (t ? u : i || u).__k = l, r || f, f, void 0 !== u.ownerSVGElement, i && !t ? [i] : r ? null : u.childNodes.length ? e.slice.call(u.childNodes) : null, c, i || f, t), j(c, l);
}

function S(n, l) {
  O(n, l, o);
}

function q(n, l, u) {
  var i,
      t,
      o,
      r = arguments,
      f = s({}, n.props);

  for (o in l) "key" == o ? i = l[o] : "ref" == o ? t = l[o] : f[o] = l[o];

  if (arguments.length > 3) for (u = [u], o = 3; o < arguments.length; o++) u.push(r[o]);
  return null != u && (f.children = u), h(n.type, f, i || n.key, t || n.ref, null);
}

function B(n, l) {
  var u = {
    __c: l = "__cC" + r++,
    __: n,
    Consumer: function (n, l) {
      return n.children(l);
    },
    Provider: function (n, u, i) {
      return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function () {
        return i;
      }, this.shouldComponentUpdate = function (n) {
        this.props.value !== n.value && u.some(k);
      }, this.sub = function (n) {
        u.push(n);
        var l = n.componentWillUnmount;

        n.componentWillUnmount = function () {
          u.splice(u.indexOf(n), 1), l && l.call(n);
        };
      }), n.children;
    }
  };
  return u.Provider.__ = u.Consumer.contextType = u;
}

n = {
  __e: function (n, l) {
    for (var u, i, t, o = l.__h; l = l.__;) if ((u = l.__c) && !u.__) try {
      if ((i = u.constructor) && null != i.getDerivedStateFromError && (u.setState(i.getDerivedStateFromError(n)), t = u.__d), null != u.componentDidCatch && (u.componentDidCatch(n), t = u.__d), t) return l.__h = o, u.__E = u;
    } catch (l) {
      n = l;
    }

    throw n;
  },
  __v: 0
}, l = function (n) {
  return null != n && void 0 === n.constructor;
}, d.prototype.setState = function (n, l) {
  var u;
  u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = s({}, this.state), "function" == typeof n && (n = n(s({}, u), this.props)), n && s(u, n), null != n && this.__v && (l && this.__h.push(l), k(this));
}, d.prototype.forceUpdate = function (n) {
  this.__v && (this.__e = !0, n && this.__h.push(n), k(this));
}, d.prototype.render = p, u = [], i = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, g.__r = 0, o = f, r = 0;


/***/ }),

/***/ "./src/index.jsx":
/*!***********************!*\
  !*** ./src/index.jsx ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ "./node_modules/preact/dist/preact.module.js");
/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.css */ "./src/index.css");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var App = /*#__PURE__*/function (_Component) {
  _inherits(App, _Component);

  var _super = _createSuper(App);

  function App() {
    var _this;

    _classCallCheck(this, App);

    _this = _super.call(this);
    _this.state = {};
    return _this;
  }

  _createClass(App, [{
    key: "render",
    value: function render(props, state) {
      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,preact__WEBPACK_IMPORTED_MODULE_0__.h)("h1", {
        className: "title"
      }, "Hello ", props.app.id, "!"));
    }
  }]);

  return App;
}(preact__WEBPACK_IMPORTED_MODULE_0__.Component);

var apps = window.mowp_atomos;
apps.forEach(function (app) {
  (0,preact__WEBPACK_IMPORTED_MODULE_0__.render)((0,preact__WEBPACK_IMPORTED_MODULE_0__.h)(App, {
    app: app
  }), document.getElementById(app.id));
});

/***/ }),

/***/ "./src/index.css":
/*!***********************!*\
  !*** ./src/index.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.jsx");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL29wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3JlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NyZWF0ZS1jb250ZXh0LmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RpZmYvY2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9kaWZmL3Byb3BzLmpzIiwid2VicGFjazovLy8uLi9zcmMvZGlmZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2Nsb25lLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9kaWZmL2NhdGNoLWVycm9yLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmNzcz9jNDBkIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsib3B0aW9ucyIsImlzVmFsaWRFbGVtZW50IiwicmVyZW5kZXJRdWV1ZSIsImRlZmVyIiwicHJldkRlYm91bmNlIiwiSVNfSFlEUkFURSIsImkiLCJFTVBUWV9PQkoiLCJFTVBUWV9BUlIiLCJJU19OT05fRElNRU5TSU9OQUwiLCJhc3NpZ24iLCJvYmoiLCJwcm9wcyIsInJlbW92ZU5vZGUiLCJub2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjaGlsZHJlbiIsImtleSIsInJlZiIsIm5vcm1hbGl6ZWRQcm9wcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInB1c2giLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJjcmVhdGVWTm9kZSIsIm9yaWdpbmFsIiwidm5vZGUiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZVJlZiIsImN1cnJlbnQiLCJGcmFnbWVudCIsIkNvbXBvbmVudCIsImNvbnRleHQiLCJnZXREb21TaWJsaW5nIiwiY2hpbGRJbmRleCIsImluZGV4T2YiLCJzaWJsaW5nIiwidXBkYXRlUGFyZW50RG9tUG9pbnRlcnMiLCJjaGlsZCIsImJhc2UiLCJlbnF1ZXVlUmVuZGVyIiwiYyIsInByb2Nlc3MiLCJkZWJvdW5jZVJlbmRlcmluZyIsInF1ZXVlIiwic29ydCIsImEiLCJiIiwic29tZSIsImNvbXBvbmVudCIsImNvbW1pdFF1ZXVlIiwib2xkVk5vZGUiLCJuZXdEb20iLCJvbGREb20iLCJwYXJlbnREb20iLCJkaWZmIiwib3duZXJTVkdFbGVtZW50IiwiY29tbWl0Um9vdCIsImRpZmZDaGlsZHJlbiIsInJlbmRlclJlc3VsdCIsIm5ld1BhcmVudFZOb2RlIiwib2xkUGFyZW50Vk5vZGUiLCJnbG9iYWxDb250ZXh0IiwiaXNTdmciLCJleGNlc3NEb21DaGlsZHJlbiIsImlzSHlkcmF0aW5nIiwiaiIsImNoaWxkVk5vZGUiLCJmaXJzdENoaWxkRG9tIiwicmVmcyIsIm9sZENoaWxkcmVuIiwib2xkQ2hpbGRyZW5MZW5ndGgiLCJBcnJheSIsImlzQXJyYXkiLCJwbGFjZUNoaWxkIiwidmFsdWUiLCJ1bm1vdW50IiwiYXBwbHlSZWYiLCJ0b0NoaWxkQXJyYXkiLCJvdXQiLCJuZXh0RG9tIiwic2liRG9tIiwib3V0ZXIiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZGlmZlByb3BzIiwiZG9tIiwibmV3UHJvcHMiLCJvbGRQcm9wcyIsImh5ZHJhdGUiLCJzZXRQcm9wZXJ0eSIsInNldFN0eWxlIiwic3R5bGUiLCJ0ZXN0IiwibmFtZSIsIm9sZFZhbHVlIiwidXNlQ2FwdHVyZSIsIm5hbWVMb3dlciIsInByb3h5IiwiY3NzVGV4dCIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwiX2xpc3RlbmVycyIsImV2ZW50UHJveHlDYXB0dXJlIiwiZXZlbnRQcm94eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImUiLCJldmVudCIsInJlb3JkZXJDaGlsZHJlbiIsIm5ld1ZOb2RlIiwidG1wIiwiaXNOZXciLCJvbGRTdGF0ZSIsInNuYXBzaG90IiwiY2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uIiwicHJvdmlkZXIiLCJjb21wb25lbnRDb250ZXh0IiwibmV3VHlwZSIsImNvbnRleHRUeXBlIiwicHJvdG90eXBlIiwicmVuZGVyIiwiZG9SZW5kZXIiLCJzdWIiLCJzdGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRDaGlsZENvbnRleHQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImRpZmZFbGVtZW50Tm9kZXMiLCJkaWZmZWQiLCJyb290IiwiY2IiLCJjYWxsIiwib2xkSHRtbCIsIm5ld0h0bWwiLCJub2RlVHlwZSIsImxvY2FsTmFtZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVFbGVtZW50TlMiLCJpcyIsImRhdGEiLCJjaGlsZE5vZGVzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJhdHRyaWJ1dGVzIiwiaW5uZXJIVE1MIiwiY2hlY2tlZCIsInBhcmVudFZOb2RlIiwic2tpcFJlbW92ZSIsInIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInRoaXMiLCJyZXBsYWNlTm9kZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjb250ZXh0SWQiLCJDb25zdW1lciIsImNvbnRleHRWYWx1ZSIsIlByb3ZpZGVyIiwic3VicyIsImN0eCIsIl9wcm9wcyIsIm9sZCIsInNwbGljZSIsImVycm9yIiwiY3RvciIsImhhbmRsZWQiLCJ3YXNIeWRyYXRpbmciLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwidXBkYXRlIiwiY2FsbGJhY2siLCJzIiwiZm9yY2VVcGRhdGUiLCJQcm9taXNlIiwidGhlbiIsImJpbmQiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIkFwcCIsImFwcCIsImlkIiwiYXBwcyIsIndpbmRvdyIsIm1vd3BfYXRvbW9zIiwiZm9yRWFjaCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFPLElDV0RBLENEWEM7QUFBQSxJRWtHTUMsQ0ZsR047QUFBQSxJR3dLSEMsQ0h4S0c7QUFBQSxJR2dMREMsQ0hoTEM7QUFBQSxJRzhMSEMsQ0g5TEc7QUFBQSxJSUtEQyxDSkxDO0FBQUEsSUtFSUMsQ0xGSjtBQUFBLElBQU1DLElBQVksRUFBbEI7QUFBQSxJQUNNQyxJQUFZLEVBRGxCO0FBQUEsSUFFTUMsSUFBcUIsbUVBRjNCOztBTU9BLFNBQVNDLENBQVQsQ0FBZ0JDLENBQWhCLEVBQXFCQyxDQUFyQixFQUFxQkE7QUFBQUEsT0FDdEIsSUFBSU4sQ0FEa0JNLElBQ2JBLENBRGFBLEVBQ05ELEVBQUlMLENBQUpLLElBQVNDLEVBQU1OLENBQU5NLENBQVREOztBQUFlTDtBQVU5Qjs7QUFBQSxTQUFTTyxDQUFULENBQW9CQyxD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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FXWE47QUFDQTs7SUFFTXFNLEc7Ozs7O0FBQ0osaUJBQWM7QUFBQTs7QUFBQTs7QUFDWjtBQUNBLFVBQUsvRCxLQUFMLEdBQWEsRUFBYjtBQUZZO0FBR2I7Ozs7MkJBQ00xSCxLLEVBQU8wSCxLLEVBQU87QUFDbkIsYUFDRSx1REFDRTtBQUFJLGlCQUFTLEVBQUM7QUFBZCxtQkFBNkIxSCxLQUFLLENBQUMwTCxHQUFOLENBQVVDLEVBQXZDLE1BREYsQ0FERjtBQUtEOzs7O0VBWGVwSyw2Qzs7QUFjbEIsSUFBSXFLLElBQUksR0FBR0MsTUFBTSxDQUFDQyxXQUFsQjtBQUNBRixJQUFJLENBQUNHLE9BQUwsQ0FBYSxVQUFBTCxHQUFHLEVBQUk7QUFDbEJuRSxnREFBTSxDQUFDLDBDQUFDLEdBQUQ7QUFBSyxPQUFHLEVBQUVtRTtBQUFWLElBQUQsRUFBb0I3QyxRQUFRLENBQUNtRCxjQUFULENBQXdCTixHQUFHLENBQUNDLEVBQTVCLENBQXBCLENBQU47QUFDRCxDQUZELEU7Ozs7Ozs7Ozs7O0FDbEJBOzs7Ozs7O1VDQUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDckJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0Esd0NBQXdDLHlDQUF5QztXQUNqRjtXQUNBO1dBQ0EsRTs7Ozs7V0NQQSxzRjs7Ozs7V0NBQTtXQUNBO1dBQ0E7V0FDQSxzREFBc0Qsa0JBQWtCO1dBQ3hFO1dBQ0EsK0NBQStDLGNBQWM7V0FDN0QsRTs7OztVQ05BO1VBQ0E7VUFDQTtVQUNBIiwiZmlsZSI6Im1vd3AtYXRvbW8tc2hvcnRjb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuZXhwb3J0IGNvbnN0IEVNUFRZX0FSUiA9IFtdO1xuZXhwb3J0IGNvbnN0IElTX05PTl9ESU1FTlNJT05BTCA9IC9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkfGl0ZXJhL2k7XG4iLCJpbXBvcnQgeyBfY2F0Y2hFcnJvciB9IGZyb20gJy4vZGlmZi9jYXRjaC1lcnJvcic7XG5cbi8qKlxuICogVGhlIGBvcHRpb25gIG9iamVjdCBjYW4gcG90ZW50aWFsbHkgY29udGFpbiBjYWxsYmFjayBmdW5jdGlvbnNcbiAqIHRoYXQgYXJlIGNhbGxlZCBkdXJpbmcgdmFyaW91cyBzdGFnZXMgb2Ygb3VyIHJlbmRlcmVyLiBUaGlzIGlzIHRoZVxuICogZm91bmRhdGlvbiBvbiB3aGljaCBhbGwgb3VyIGFkZG9ucyBsaWtlIGBwcmVhY3QvZGVidWdgLCBgcHJlYWN0L2NvbXBhdGAsXG4gKiBhbmQgYHByZWFjdC9ob29rc2AgYXJlIGJhc2VkIG9uLiBTZWUgdGhlIGBPcHRpb25zYCB0eXBlIGluIGBpbnRlcm5hbC5kLnRzYFxuICogZm9yIGEgZnVsbCBsaXN0IG9mIGF2YWlsYWJsZSBvcHRpb24gaG9va3MgKG1vc3QgZWRpdG9ycy9JREVzIGFsbG93IHlvdSB0b1xuICogY3RybCtjbGljayBvciBjbWQrY2xpY2sgb24gbWFjIHRoZSB0eXBlIGRlZmluaXRpb24gYmVsb3cpLlxuICogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLk9wdGlvbnN9XG4gKi9cbmNvbnN0IG9wdGlvbnMgPSB7XG5cdF9jYXRjaEVycm9yLFxuXHRfdm5vZGVJZDogMFxufTtcblxuZXhwb3J0IGRlZmF1bHQgb3B0aW9ucztcbiIsImltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIHZpcnR1YWwgbm9kZSAodXNlZCBmb3IgSlNYKVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInR5cGVcIl19IHR5cGUgVGhlIG5vZGUgbmFtZSBvciBDb21wb25lbnRcbiAqIGNvbnN0cnVjdG9yIGZvciB0aGlzIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsIHwgdW5kZWZpbmVkfSBbcHJvcHNdIFRoZSBwcm9wZXJ0aWVzIG9mIHRoZSB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuJykuQ29tcG9uZW50Q2hpbGRyZW4+fSBbY2hpbGRyZW5dIFRoZSBjaGlsZHJlbiBvZiB0aGUgdmlydHVhbCBub2RlXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuXHRsZXQgbm9ybWFsaXplZFByb3BzID0ge30sXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRpO1xuXHRmb3IgKGkgaW4gcHJvcHMpIHtcblx0XHRpZiAoaSA9PSAna2V5Jykga2V5ID0gcHJvcHNbaV07XG5cdFx0ZWxzZSBpZiAoaSA9PSAncmVmJykgcmVmID0gcHJvcHNbaV07XG5cdFx0ZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSBwcm9wc1tpXTtcblx0fVxuXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMykge1xuXHRcdGNoaWxkcmVuID0gW2NoaWxkcmVuXTtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vcHJlYWN0anMvcHJlYWN0L2lzc3Vlcy8xOTE2XG5cdFx0Zm9yIChpID0gMzsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hpbGRyZW4ucHVzaChhcmd1bWVudHNbaV0pO1xuXHRcdH1cblx0fVxuXHRpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdG5vcm1hbGl6ZWRQcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXHR9XG5cblx0Ly8gSWYgYSBDb21wb25lbnQgVk5vZGUsIGNoZWNrIGZvciBhbmQgYXBwbHkgZGVmYXVsdFByb3BzXG5cdC8vIE5vdGU6IHR5cGUgbWF5IGJlIHVuZGVmaW5lZCBpbiBkZXZlbG9wbWVudCwgbXVzdCBuZXZlciBlcnJvciBoZXJlLlxuXHRpZiAodHlwZW9mIHR5cGUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlLmRlZmF1bHRQcm9wcyAhPSBudWxsKSB7XG5cdFx0Zm9yIChpIGluIHR5cGUuZGVmYXVsdFByb3BzKSB7XG5cdFx0XHRpZiAobm9ybWFsaXplZFByb3BzW2ldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0bm9ybWFsaXplZFByb3BzW2ldID0gdHlwZS5kZWZhdWx0UHJvcHNbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5LCByZWYsIG51bGwpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIFZOb2RlICh1c2VkIGludGVybmFsbHkgYnkgUHJlYWN0KVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInR5cGVcIl19IHR5cGUgVGhlIG5vZGUgbmFtZSBvciBDb21wb25lbnRcbiAqIENvbnN0cnVjdG9yIGZvciB0aGlzIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3QgfCBzdHJpbmcgfCBudW1iZXIgfCBudWxsfSBwcm9wcyBUaGUgcHJvcGVydGllcyBvZiB0aGlzIHZpcnR1YWwgbm9kZS5cbiAqIElmIHRoaXMgdmlydHVhbCBub2RlIHJlcHJlc2VudHMgYSB0ZXh0IG5vZGUsIHRoaXMgaXMgdGhlIHRleHQgb2YgdGhlIG5vZGUgKHN0cmluZyBvciBudW1iZXIpLlxuICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBudWxsfSBrZXkgVGhlIGtleSBmb3IgdGhpcyB2aXJ0dWFsIG5vZGUsIHVzZWQgd2hlblxuICogZGlmZmluZyBpdCBhZ2FpbnN0IGl0cyBjaGlsZHJlblxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInJlZlwiXX0gcmVmIFRoZSByZWYgcHJvcGVydHkgdGhhdCB3aWxsXG4gKiByZWNlaXZlIGEgcmVmZXJlbmNlIHRvIGl0cyBjcmVhdGVkIGNoaWxkXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wcywga2V5LCByZWYsIG9yaWdpbmFsKSB7XG5cdC8vIFY4IHNlZW1zIHRvIGJlIGJldHRlciBhdCBkZXRlY3RpbmcgdHlwZSBzaGFwZXMgaWYgdGhlIG9iamVjdCBpcyBhbGxvY2F0ZWQgZnJvbSB0aGUgc2FtZSBjYWxsIHNpdGVcblx0Ly8gRG8gbm90IGlubGluZSBpbnRvIGNyZWF0ZUVsZW1lbnQgYW5kIGNvZXJjZVRvVk5vZGUhXG5cdGNvbnN0IHZub2RlID0ge1xuXHRcdHR5cGUsXG5cdFx0cHJvcHMsXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRfY2hpbGRyZW46IG51bGwsXG5cdFx0X3BhcmVudDogbnVsbCxcblx0XHRfZGVwdGg6IDAsXG5cdFx0X2RvbTogbnVsbCxcblx0XHQvLyBfbmV4dERvbSBtdXN0IGJlIGluaXRpYWxpemVkIHRvIHVuZGVmaW5lZCBiL2MgaXQgd2lsbCBldmVudHVhbGx5XG5cdFx0Ly8gYmUgc2V0IHRvIGRvbS5uZXh0U2libGluZyB3aGljaCBjYW4gcmV0dXJuIGBudWxsYCBhbmQgaXQgaXMgaW1wb3J0YW50XG5cdFx0Ly8gdG8gYmUgYWJsZSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIGFuIHVuaW5pdGlhbGl6ZWQgX25leHREb20gYW5kXG5cdFx0Ly8gYSBfbmV4dERvbSB0aGF0IGhhcyBiZWVuIHNldCB0byBgbnVsbGBcblx0XHRfbmV4dERvbTogdW5kZWZpbmVkLFxuXHRcdF9jb21wb25lbnQ6IG51bGwsXG5cdFx0X2h5ZHJhdGluZzogbnVsbCxcblx0XHRjb25zdHJ1Y3RvcjogdW5kZWZpbmVkLFxuXHRcdF9vcmlnaW5hbDogb3JpZ2luYWwgPT0gbnVsbCA/ICsrb3B0aW9ucy5fdm5vZGVJZCA6IG9yaWdpbmFsXG5cdH07XG5cblx0aWYgKG9wdGlvbnMudm5vZGUgIT0gbnVsbCkgb3B0aW9ucy52bm9kZSh2bm9kZSk7XG5cblx0cmV0dXJuIHZub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVmKCkge1xuXHRyZXR1cm4geyBjdXJyZW50OiBudWxsIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGcmFnbWVudChwcm9wcykge1xuXHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0aGUgYXJndW1lbnQgaXMgYSB2YWxpZCBQcmVhY3QgVk5vZGUuXG4gKiBAcGFyYW0geyp9IHZub2RlXG4gKiBAcmV0dXJucyB7dm5vZGUgaXMgaW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkRWxlbWVudCA9IHZub2RlID0+XG5cdHZub2RlICE9IG51bGwgJiYgdm5vZGUuY29uc3RydWN0b3IgPT09IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBkaWZmLCBjb21taXRSb290IH0gZnJvbSAnLi9kaWZmL2luZGV4JztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xuXG4vKipcbiAqIEJhc2UgQ29tcG9uZW50IGNsYXNzLiBQcm92aWRlcyBgc2V0U3RhdGUoKWAgYW5kIGBmb3JjZVVwZGF0ZSgpYCwgd2hpY2hcbiAqIHRyaWdnZXIgcmVuZGVyaW5nXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgVGhlIGluaXRpYWwgY29tcG9uZW50IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBUaGUgaW5pdGlhbCBjb250ZXh0IGZyb20gcGFyZW50IGNvbXBvbmVudHMnXG4gKiBnZXRDaGlsZENvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgY29udGV4dCkge1xuXHR0aGlzLnByb3BzID0gcHJvcHM7XG5cdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbi8qKlxuICogVXBkYXRlIGNvbXBvbmVudCBzdGF0ZSBhbmQgc2NoZWR1bGUgYSByZS1yZW5kZXIuXG4gKiBAcGFyYW0ge29iamVjdCB8ICgoczogb2JqZWN0LCBwOiBvYmplY3QpID0+IG9iamVjdCl9IHVwZGF0ZSBBIGhhc2ggb2Ygc3RhdGVcbiAqIHByb3BlcnRpZXMgdG8gdXBkYXRlIHdpdGggbmV3IHZhbHVlcyBvciBhIGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gdGhlIGN1cnJlbnRcbiAqIHN0YXRlIGFuZCBwcm9wcyByZXR1cm5zIGEgbmV3IHBhcnRpYWwgc3RhdGVcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbmNlIGNvbXBvbmVudCBzdGF0ZSBpc1xuICogdXBkYXRlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24odXBkYXRlLCBjYWxsYmFjaykge1xuXHQvLyBvbmx5IGNsb25lIHN0YXRlIHdoZW4gY29weWluZyB0byBuZXh0U3RhdGUgdGhlIGZpcnN0IHRpbWUuXG5cdGxldCBzO1xuXHRpZiAodGhpcy5fbmV4dFN0YXRlICE9IG51bGwgJiYgdGhpcy5fbmV4dFN0YXRlICE9PSB0aGlzLnN0YXRlKSB7XG5cdFx0cyA9IHRoaXMuX25leHRTdGF0ZTtcblx0fSBlbHNlIHtcblx0XHRzID0gdGhpcy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgdXBkYXRlID09ICdmdW5jdGlvbicpIHtcblx0XHQvLyBTb21lIGxpYnJhcmllcyBsaWtlIGBpbW1lcmAgbWFyayB0aGUgY3VycmVudCBzdGF0ZSBhcyByZWFkb25seSxcblx0XHQvLyBwcmV2ZW50aW5nIHVzIGZyb20gbXV0YXRpbmcgaXQsIHNvIHdlIG5lZWQgdG8gY2xvbmUgaXQuIFNlZSAjMjcxNlxuXHRcdHVwZGF0ZSA9IHVwZGF0ZShhc3NpZ24oe30sIHMpLCB0aGlzLnByb3BzKTtcblx0fVxuXG5cdGlmICh1cGRhdGUpIHtcblx0XHRhc3NpZ24ocywgdXBkYXRlKTtcblx0fVxuXG5cdC8vIFNraXAgdXBkYXRlIGlmIHVwZGF0ZXIgZnVuY3Rpb24gcmV0dXJuZWQgbnVsbFxuXHRpZiAodXBkYXRlID09IG51bGwpIHJldHVybjtcblxuXHRpZiAodGhpcy5fdm5vZGUpIHtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEltbWVkaWF0ZWx5IHBlcmZvcm0gYSBzeW5jaHJvbm91cyByZS1yZW5kZXIgb2YgdGhlIGNvbXBvbmVudFxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpc1xuICogcmUtcmVuZGVyZWRcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdGlmICh0aGlzLl92bm9kZSkge1xuXHRcdC8vIFNldCByZW5kZXIgbW9kZSBzbyB0aGF0IHdlIGNhbiBkaWZmZXJlbnRpYXRlIHdoZXJlIHRoZSByZW5kZXIgcmVxdWVzdFxuXHRcdC8vIGlzIGNvbWluZyBmcm9tLiBXZSBuZWVkIHRoaXMgYmVjYXVzZSBmb3JjZVVwZGF0ZSBzaG91bGQgbmV2ZXIgY2FsbFxuXHRcdC8vIHNob3VsZENvbXBvbmVudFVwZGF0ZVxuXHRcdHRoaXMuX2ZvcmNlID0gdHJ1ZTtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEFjY2VwdHMgYHByb3BzYCBhbmQgYHN0YXRlYCwgYW5kIHJldHVybnMgYSBuZXcgVmlydHVhbCBET00gdHJlZSB0byBidWlsZC5cbiAqIFZpcnR1YWwgRE9NIGlzIGdlbmVyYWxseSBjb25zdHJ1Y3RlZCB2aWEgW0pTWF0oaHR0cDovL2phc29uZm9ybWF0LmNvbS93dGYtaXMtanN4KS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBQcm9wcyAoZWc6IEpTWCBhdHRyaWJ1dGVzKSByZWNlaXZlZCBmcm9tIHBhcmVudFxuICogZWxlbWVudC9jb21wb25lbnRcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSBUaGUgY29tcG9uZW50J3MgY3VycmVudCBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgQ29udGV4dCBvYmplY3QsIGFzIHJldHVybmVkIGJ5IHRoZSBuZWFyZXN0XG4gKiBhbmNlc3RvcidzIGBnZXRDaGlsZENvbnRleHQoKWBcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbiB8IHZvaWR9XG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gRnJhZ21lbnQ7XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbH0gW2NoaWxkSW5kZXhdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21TaWJsaW5nKHZub2RlLCBjaGlsZEluZGV4KSB7XG5cdGlmIChjaGlsZEluZGV4ID09IG51bGwpIHtcblx0XHQvLyBVc2UgY2hpbGRJbmRleD09bnVsbCBhcyBhIHNpZ25hbCB0byByZXN1bWUgdGhlIHNlYXJjaCBmcm9tIHRoZSB2bm9kZSdzIHNpYmxpbmdcblx0XHRyZXR1cm4gdm5vZGUuX3BhcmVudFxuXHRcdFx0PyBnZXREb21TaWJsaW5nKHZub2RlLl9wYXJlbnQsIHZub2RlLl9wYXJlbnQuX2NoaWxkcmVuLmluZGV4T2Yodm5vZGUpICsgMSlcblx0XHRcdDogbnVsbDtcblx0fVxuXG5cdGxldCBzaWJsaW5nO1xuXHRmb3IgKDsgY2hpbGRJbmRleCA8IHZub2RlLl9jaGlsZHJlbi5sZW5ndGg7IGNoaWxkSW5kZXgrKykge1xuXHRcdHNpYmxpbmcgPSB2bm9kZS5fY2hpbGRyZW5bY2hpbGRJbmRleF07XG5cblx0XHRpZiAoc2libGluZyAhPSBudWxsICYmIHNpYmxpbmcuX2RvbSAhPSBudWxsKSB7XG5cdFx0XHQvLyBTaW5jZSB1cGRhdGVQYXJlbnREb21Qb2ludGVycyBrZWVwcyBfZG9tIHBvaW50ZXIgY29ycmVjdCxcblx0XHRcdC8vIHdlIGNhbiByZWx5IG9uIF9kb20gdG8gdGVsbCB1cyBpZiB0aGlzIHN1YnRyZWUgY29udGFpbnMgYVxuXHRcdFx0Ly8gcmVuZGVyZWQgRE9NIG5vZGUsIGFuZCB3aGF0IHRoZSBmaXJzdCByZW5kZXJlZCBET00gbm9kZSBpc1xuXHRcdFx0cmV0dXJuIHNpYmxpbmcuX2RvbTtcblx0XHR9XG5cdH1cblxuXHQvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBub3QgZm91bmQgYSBET00gbm9kZSBpbiB0aGlzIHZub2RlJ3MgY2hpbGRyZW4uXG5cdC8vIFdlIG11c3QgcmVzdW1lIGZyb20gdGhpcyB2bm9kZSdzIHNpYmxpbmcgKGluIGl0J3MgcGFyZW50IF9jaGlsZHJlbiBhcnJheSlcblx0Ly8gT25seSBjbGltYiB1cCBhbmQgc2VhcmNoIHRoZSBwYXJlbnQgaWYgd2UgYXJlbid0IHNlYXJjaGluZyB0aHJvdWdoIGEgRE9NXG5cdC8vIFZOb2RlIChtZWFuaW5nIHdlIHJlYWNoZWQgdGhlIERPTSBwYXJlbnQgb2YgdGhlIG9yaWdpbmFsIHZub2RlIHRoYXQgYmVnYW5cblx0Ly8gdGhlIHNlYXJjaClcblx0cmV0dXJuIHR5cGVvZiB2bm9kZS50eXBlID09ICdmdW5jdGlvbicgPyBnZXREb21TaWJsaW5nKHZub2RlKSA6IG51bGw7XG59XG5cbi8qKlxuICogVHJpZ2dlciBpbi1wbGFjZSByZS1yZW5kZXJpbmcgb2YgYSBjb21wb25lbnQuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gcmVyZW5kZXJcbiAqL1xuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCkge1xuXHRsZXQgdm5vZGUgPSBjb21wb25lbnQuX3Zub2RlLFxuXHRcdG9sZERvbSA9IHZub2RlLl9kb20sXG5cdFx0cGFyZW50RG9tID0gY29tcG9uZW50Ll9wYXJlbnREb207XG5cblx0aWYgKHBhcmVudERvbSkge1xuXHRcdGxldCBjb21taXRRdWV1ZSA9IFtdO1xuXHRcdGNvbnN0IG9sZFZOb2RlID0gYXNzaWduKHt9LCB2bm9kZSk7XG5cdFx0b2xkVk5vZGUuX29yaWdpbmFsID0gdm5vZGUuX29yaWdpbmFsICsgMTtcblxuXHRcdGxldCBuZXdEb20gPSBkaWZmKFxuXHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0dm5vZGUsXG5cdFx0XHRvbGRWTm9kZSxcblx0XHRcdGNvbXBvbmVudC5fZ2xvYmFsQ29udGV4dCxcblx0XHRcdHBhcmVudERvbS5vd25lclNWR0VsZW1lbnQgIT09IHVuZGVmaW5lZCxcblx0XHRcdHZub2RlLl9oeWRyYXRpbmcgIT0gbnVsbCA/IFtvbGREb21dIDogbnVsbCxcblx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0b2xkRG9tID09IG51bGwgPyBnZXREb21TaWJsaW5nKHZub2RlKSA6IG9sZERvbSxcblx0XHRcdHZub2RlLl9oeWRyYXRpbmdcblx0XHQpO1xuXHRcdGNvbW1pdFJvb3QoY29tbWl0UXVldWUsIHZub2RlKTtcblxuXHRcdGlmIChuZXdEb20gIT0gb2xkRG9tKSB7XG5cdFx0XHR1cGRhdGVQYXJlbnREb21Qb2ludGVycyh2bm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqL1xuZnVuY3Rpb24gdXBkYXRlUGFyZW50RG9tUG9pbnRlcnModm5vZGUpIHtcblx0aWYgKCh2bm9kZSA9IHZub2RlLl9wYXJlbnQpICE9IG51bGwgJiYgdm5vZGUuX2NvbXBvbmVudCAhPSBudWxsKSB7XG5cdFx0dm5vZGUuX2RvbSA9IHZub2RlLl9jb21wb25lbnQuYmFzZSA9IG51bGw7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2bm9kZS5fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxldCBjaGlsZCA9IHZub2RlLl9jaGlsZHJlbltpXTtcblx0XHRcdGlmIChjaGlsZCAhPSBudWxsICYmIGNoaWxkLl9kb20gIT0gbnVsbCkge1xuXHRcdFx0XHR2bm9kZS5fZG9tID0gdm5vZGUuX2NvbXBvbmVudC5iYXNlID0gY2hpbGQuX2RvbTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzKHZub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIFRoZSByZW5kZXIgcXVldWVcbiAqIEB0eXBlIHtBcnJheTxpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fVxuICovXG5sZXQgcmVyZW5kZXJRdWV1ZSA9IFtdO1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNjaGVkdWxlIGEgY2FsbGJhY2tcbiAqIEB0eXBlIHsoY2I6ICgpID0+IHZvaWQpID0+IHZvaWR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vLyBOb3RlIHRoZSBmb2xsb3dpbmcgbGluZSBpc24ndCB0cmVlLXNoYWtlbiBieSByb2xsdXAgY3V6IG9mIHJvbGx1cC9yb2xsdXAjMjU2NlxuY29uc3QgZGVmZXIgPVxuXHR0eXBlb2YgUHJvbWlzZSA9PSAnZnVuY3Rpb24nXG5cdFx0PyBQcm9taXNlLnByb3RvdHlwZS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpXG5cdFx0OiBzZXRUaW1lb3V0O1xuXG4vKlxuICogVGhlIHZhbHVlIG9mIGBDb21wb25lbnQuZGVib3VuY2VgIG11c3QgYXN5bmNocm9ub3VzbHkgaW52b2tlIHRoZSBwYXNzZWQgaW4gY2FsbGJhY2suIEl0IGlzXG4gKiBpbXBvcnRhbnQgdGhhdCBjb250cmlidXRvcnMgdG8gUHJlYWN0IGNhbiBjb25zaXN0ZW50bHkgcmVhc29uIGFib3V0IHdoYXQgY2FsbHMgdG8gYHNldFN0YXRlYCwgZXRjLlxuICogZG8sIGFuZCB3aGVuIHRoZWlyIGVmZmVjdHMgd2lsbCBiZSBhcHBsaWVkLiBTZWUgdGhlIGxpbmtzIGJlbG93IGZvciBzb21lIGZ1cnRoZXIgcmVhZGluZyBvbiBkZXNpZ25pbmdcbiAqIGFzeW5jaHJvbm91cyBBUElzLlxuICogKiBbRGVzaWduaW5nIEFQSXMgZm9yIEFzeW5jaHJvbnldKGh0dHBzOi8vYmxvZy5penMubWUvMjAxMy8wOC9kZXNpZ25pbmctYXBpcy1mb3ItYXN5bmNocm9ueSlcbiAqICogW0NhbGxiYWNrcyBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzXShodHRwczovL2Jsb2cub21ldGVyLmNvbS8yMDExLzA3LzI0L2NhbGxiYWNrcy1zeW5jaHJvbm91cy1hbmQtYXN5bmNocm9ub3VzLylcbiAqL1xuXG5sZXQgcHJldkRlYm91bmNlO1xuXG4vKipcbiAqIEVucXVldWUgYSByZXJlbmRlciBvZiBhIGNvbXBvbmVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9IGMgVGhlIGNvbXBvbmVudCB0byByZXJlbmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5xdWV1ZVJlbmRlcihjKSB7XG5cdGlmIChcblx0XHQoIWMuX2RpcnR5ICYmXG5cdFx0XHQoYy5fZGlydHkgPSB0cnVlKSAmJlxuXHRcdFx0cmVyZW5kZXJRdWV1ZS5wdXNoKGMpICYmXG5cdFx0XHQhcHJvY2Vzcy5fcmVyZW5kZXJDb3VudCsrKSB8fFxuXHRcdHByZXZEZWJvdW5jZSAhPT0gb3B0aW9ucy5kZWJvdW5jZVJlbmRlcmluZ1xuXHQpIHtcblx0XHRwcmV2RGVib3VuY2UgPSBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nO1xuXHRcdChwcmV2RGVib3VuY2UgfHwgZGVmZXIpKHByb2Nlc3MpO1xuXHR9XG59XG5cbi8qKiBGbHVzaCB0aGUgcmVuZGVyIHF1ZXVlIGJ5IHJlcmVuZGVyaW5nIGFsbCBxdWV1ZWQgY29tcG9uZW50cyAqL1xuZnVuY3Rpb24gcHJvY2VzcygpIHtcblx0bGV0IHF1ZXVlO1xuXHR3aGlsZSAoKHByb2Nlc3MuX3JlcmVuZGVyQ291bnQgPSByZXJlbmRlclF1ZXVlLmxlbmd0aCkpIHtcblx0XHRxdWV1ZSA9IHJlcmVuZGVyUXVldWUuc29ydCgoYSwgYikgPT4gYS5fdm5vZGUuX2RlcHRoIC0gYi5fdm5vZGUuX2RlcHRoKTtcblx0XHRyZXJlbmRlclF1ZXVlID0gW107XG5cdFx0Ly8gRG9uJ3QgdXBkYXRlIGByZW5kZXJDb3VudGAgeWV0LiBLZWVwIGl0cyB2YWx1ZSBub24temVybyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5XG5cdFx0Ly8gcHJvY2VzcygpIGNhbGxzIGZyb20gZ2V0dGluZyBzY2hlZHVsZWQgd2hpbGUgYHF1ZXVlYCBpcyBzdGlsbCBiZWluZyBjb25zdW1lZC5cblx0XHRxdWV1ZS5zb21lKGMgPT4ge1xuXHRcdFx0aWYgKGMuX2RpcnR5KSByZW5kZXJDb21wb25lbnQoYyk7XG5cdFx0fSk7XG5cdH1cbn1cbnByb2Nlc3MuX3JlcmVuZGVyQ291bnQgPSAwO1xuIiwiaW1wb3J0IHsgRU1QVFlfT0JKLCBFTVBUWV9BUlIgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjb21taXRSb290LCBkaWZmIH0gZnJvbSAnLi9kaWZmL2luZGV4JztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL29wdGlvbnMnO1xuXG5jb25zdCBJU19IWURSQVRFID0gRU1QVFlfT0JKO1xuXG4vKipcbiAqIFJlbmRlciBhIFByZWFjdCB2aXJ0dWFsIG5vZGUgaW50byBhIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbmRleCcpLkNvbXBvbmVudENoaWxkfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHJlbmRlclxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHRvXG4gKiByZW5kZXIgaW50b1xuICogQHBhcmFtIHtFbGVtZW50IHwgVGV4dH0gW3JlcGxhY2VOb2RlXSBPcHRpb25hbDogQXR0ZW1wdCB0byByZS11c2UgYW5cbiAqIGV4aXN0aW5nIERPTSB0cmVlIHJvb3RlZCBhdCBgcmVwbGFjZU5vZGVgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIodm5vZGUsIHBhcmVudERvbSwgcmVwbGFjZU5vZGUpIHtcblx0aWYgKG9wdGlvbnMuX3Jvb3QpIG9wdGlvbnMuX3Jvb3Qodm5vZGUsIHBhcmVudERvbSk7XG5cblx0Ly8gV2UgYWJ1c2UgdGhlIGByZXBsYWNlTm9kZWAgcGFyYW1ldGVyIGluIGBoeWRyYXRlKClgIHRvIHNpZ25hbCBpZiB3ZVxuXHQvLyBhcmUgaW4gaHlkcmF0aW9uIG1vZGUgb3Igbm90IGJ5IHBhc3NpbmcgYElTX0hZRFJBVEVgIGluc3RlYWQgb2YgYVxuXHQvLyBET00gZWxlbWVudC5cblx0bGV0IGlzSHlkcmF0aW5nID0gcmVwbGFjZU5vZGUgPT09IElTX0hZRFJBVEU7XG5cblx0Ly8gVG8gYmUgYWJsZSB0byBzdXBwb3J0IGNhbGxpbmcgYHJlbmRlcigpYCBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZVxuXHQvLyBET00gbm9kZSwgd2UgbmVlZCB0byBvYnRhaW4gYSByZWZlcmVuY2UgdG8gdGhlIHByZXZpb3VzIHRyZWUuIFdlIGRvXG5cdC8vIHRoaXMgYnkgYXNzaWduaW5nIGEgbmV3IGBfY2hpbGRyZW5gIHByb3BlcnR5IHRvIERPTSBub2RlcyB3aGljaCBwb2ludHNcblx0Ly8gdG8gdGhlIGxhc3QgcmVuZGVyZWQgdHJlZS4gQnkgZGVmYXVsdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBwcmVzZW50LCB3aGljaFxuXHQvLyBtZWFucyB0aGF0IHdlIGFyZSBtb3VudGluZyBhIG5ldyB0cmVlIGZvciB0aGUgZmlyc3QgdGltZS5cblx0bGV0IG9sZFZOb2RlID0gaXNIeWRyYXRpbmdcblx0XHQ/IG51bGxcblx0XHQ6IChyZXBsYWNlTm9kZSAmJiByZXBsYWNlTm9kZS5fY2hpbGRyZW4pIHx8IHBhcmVudERvbS5fY2hpbGRyZW47XG5cdHZub2RlID0gY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgW3Zub2RlXSk7XG5cblx0Ly8gTGlzdCBvZiBlZmZlY3RzIHRoYXQgbmVlZCB0byBiZSBjYWxsZWQgYWZ0ZXIgZGlmZmluZy5cblx0bGV0IGNvbW1pdFF1ZXVlID0gW107XG5cdGRpZmYoXG5cdFx0cGFyZW50RG9tLFxuXHRcdC8vIERldGVybWluZSB0aGUgbmV3IHZub2RlIHRyZWUgYW5kIHN0b3JlIGl0IG9uIHRoZSBET00gZWxlbWVudCBvblxuXHRcdC8vIG91ciBjdXN0b20gYF9jaGlsZHJlbmAgcHJvcGVydHkuXG5cdFx0KChpc0h5ZHJhdGluZyA/IHBhcmVudERvbSA6IHJlcGxhY2VOb2RlIHx8IHBhcmVudERvbSkuX2NoaWxkcmVuID0gdm5vZGUpLFxuXHRcdG9sZFZOb2RlIHx8IEVNUFRZX09CSixcblx0XHRFTVBUWV9PQkosXG5cdFx0cGFyZW50RG9tLm93bmVyU1ZHRWxlbWVudCAhPT0gdW5kZWZpbmVkLFxuXHRcdHJlcGxhY2VOb2RlICYmICFpc0h5ZHJhdGluZ1xuXHRcdFx0PyBbcmVwbGFjZU5vZGVdXG5cdFx0XHQ6IG9sZFZOb2RlXG5cdFx0XHQ/IG51bGxcblx0XHRcdDogcGFyZW50RG9tLmNoaWxkTm9kZXMubGVuZ3RoXG5cdFx0XHQ/IEVNUFRZX0FSUi5zbGljZS5jYWxsKHBhcmVudERvbS5jaGlsZE5vZGVzKVxuXHRcdFx0OiBudWxsLFxuXHRcdGNvbW1pdFF1ZXVlLFxuXHRcdHJlcGxhY2VOb2RlIHx8IEVNUFRZX09CSixcblx0XHRpc0h5ZHJhdGluZ1xuXHQpO1xuXG5cdC8vIEZsdXNoIGFsbCBxdWV1ZWQgZWZmZWN0c1xuXHRjb21taXRSb290KGNvbW1pdFF1ZXVlLCB2bm9kZSk7XG59XG5cbi8qKlxuICogVXBkYXRlIGFuIGV4aXN0aW5nIERPTSBlbGVtZW50IHdpdGggZGF0YSBmcm9tIGEgUHJlYWN0IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5Db21wb25lbnRDaGlsZH0gdm5vZGUgVGhlIHZpcnR1YWwgbm9kZSB0byByZW5kZXJcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBET00gZWxlbWVudCB0b1xuICogdXBkYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoeWRyYXRlKHZub2RlLCBwYXJlbnREb20pIHtcblx0cmVuZGVyKHZub2RlLCBwYXJlbnREb20sIElTX0hZRFJBVEUpO1xufVxuIiwiaW1wb3J0IHsgZW5xdWV1ZVJlbmRlciB9IGZyb20gJy4vY29tcG9uZW50JztcblxuZXhwb3J0IGxldCBpID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoZGVmYXVsdFZhbHVlLCBjb250ZXh0SWQpIHtcblx0Y29udGV4dElkID0gJ19fY0MnICsgaSsrO1xuXG5cdGNvbnN0IGNvbnRleHQgPSB7XG5cdFx0X2lkOiBjb250ZXh0SWQsXG5cdFx0X2RlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuXHRcdENvbnN1bWVyKHByb3BzLCBjb250ZXh0VmFsdWUpIHtcblx0XHRcdC8vIHJldHVybiBwcm9wcy5jaGlsZHJlbihcblx0XHRcdC8vIFx0Y29udGV4dFtjb250ZXh0SWRdID8gY29udGV4dFtjb250ZXh0SWRdLnByb3BzLnZhbHVlIDogZGVmYXVsdFZhbHVlXG5cdFx0XHQvLyApO1xuXHRcdFx0cmV0dXJuIHByb3BzLmNoaWxkcmVuKGNvbnRleHRWYWx1ZSk7XG5cdFx0fSxcblx0XHRQcm92aWRlcihwcm9wcywgc3VicywgY3R4KSB7XG5cdFx0XHRpZiAoIXRoaXMuZ2V0Q2hpbGRDb250ZXh0KSB7XG5cdFx0XHRcdHN1YnMgPSBbXTtcblx0XHRcdFx0Y3R4ID0ge307XG5cdFx0XHRcdGN0eFtjb250ZXh0SWRdID0gdGhpcztcblxuXHRcdFx0XHR0aGlzLmdldENoaWxkQ29udGV4dCA9ICgpID0+IGN0eDtcblxuXHRcdFx0XHR0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uKF9wcm9wcykge1xuXHRcdFx0XHRcdGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBfcHJvcHMudmFsdWUpIHtcblx0XHRcdFx0XHRcdC8vIEkgdGhpbmsgdGhlIGZvcmNlZCB2YWx1ZSBwcm9wYWdhdGlvbiBoZXJlIHdhcyBvbmx5IG5lZWRlZCB3aGVuIGBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nYCB3YXMgYmVpbmcgYnlwYXNzZWQ6XG5cdFx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vcHJlYWN0anMvcHJlYWN0L2NvbW1pdC80ZDMzOWZiODAzYmVhMDllOWYxOThhYmYzOGNhMWJmOGVhNGI3NzcxI2RpZmYtNTQ2ODJjZTM4MDkzNWE3MTdlNDFiOGJmYzU0NzM3ZjZSMzU4XG5cdFx0XHRcdFx0XHQvLyBJbiB0aG9zZSBjYXNlcyB0aG91Z2gsIGV2ZW4gd2l0aCB0aGUgdmFsdWUgY29ycmVjdGVkLCB3ZSdyZSBkb3VibGUtcmVuZGVyaW5nIGFsbCBub2Rlcy5cblx0XHRcdFx0XHRcdC8vIEl0IG1pZ2h0IGJlIGJldHRlciB0byBqdXN0IHRlbGwgZm9sa3Mgbm90IHRvIHVzZSBmb3JjZS1zeW5jIG1vZGUuXG5cdFx0XHRcdFx0XHQvLyBDdXJyZW50bHksIHVzaW5nIGB1c2VDb250ZXh0KClgIGluIGEgY2xhc3MgY29tcG9uZW50IHdpbGwgb3ZlcndyaXRlIGl0cyBgdGhpcy5jb250ZXh0YCB2YWx1ZS5cblx0XHRcdFx0XHRcdC8vIHN1YnMuc29tZShjID0+IHtcblx0XHRcdFx0XHRcdC8vIFx0Yy5jb250ZXh0ID0gX3Byb3BzLnZhbHVlO1xuXHRcdFx0XHRcdFx0Ly8gXHRlbnF1ZXVlUmVuZGVyKGMpO1xuXHRcdFx0XHRcdFx0Ly8gfSk7XG5cblx0XHRcdFx0XHRcdC8vIHN1YnMuc29tZShjID0+IHtcblx0XHRcdFx0XHRcdC8vIFx0Yy5jb250ZXh0W2NvbnRleHRJZF0gPSBfcHJvcHMudmFsdWU7XG5cdFx0XHRcdFx0XHQvLyBcdGVucXVldWVSZW5kZXIoYyk7XG5cdFx0XHRcdFx0XHQvLyB9KTtcblx0XHRcdFx0XHRcdHN1YnMuc29tZShlbnF1ZXVlUmVuZGVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5zdWIgPSBjID0+IHtcblx0XHRcdFx0XHRzdWJzLnB1c2goYyk7XG5cdFx0XHRcdFx0bGV0IG9sZCA9IGMuY29tcG9uZW50V2lsbFVubW91bnQ7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsVW5tb3VudCA9ICgpID0+IHtcblx0XHRcdFx0XHRcdHN1YnMuc3BsaWNlKHN1YnMuaW5kZXhPZihjKSwgMSk7XG5cdFx0XHRcdFx0XHRpZiAob2xkKSBvbGQuY2FsbChjKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG5cdFx0fVxuXHR9O1xuXG5cdC8vIERldnRvb2xzIG5lZWRzIGFjY2VzcyB0byB0aGUgY29udGV4dCBvYmplY3Qgd2hlbiBpdFxuXHQvLyBlbmNvdW50ZXJzIGEgUHJvdmlkZXIuIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIHN1cHBvcnRcblx0Ly8gc2V0dGluZyBgZGlzcGxheU5hbWVgIG9uIHRoZSBjb250ZXh0IG9iamVjdCBpbnN0ZWFkXG5cdC8vIG9mIG9uIHRoZSBjb21wb25lbnQgaXRzZWxmLiBTZWU6XG5cdC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9jb250ZXh0Lmh0bWwjY29udGV4dGRpc3BsYXluYW1lXG5cblx0cmV0dXJuIChjb250ZXh0LlByb3ZpZGVyLl9jb250ZXh0UmVmID0gY29udGV4dC5Db25zdW1lci5jb250ZXh0VHlwZSA9IGNvbnRleHQpO1xufVxuIiwiLyoqXG4gKiBBc3NpZ24gcHJvcGVydGllcyBmcm9tIGBwcm9wc2AgdG8gYG9iamBcbiAqIEB0ZW1wbGF0ZSBPLCBQIFRoZSBvYmogYW5kIHByb3BzIHR5cGVzXG4gKiBAcGFyYW0ge099IG9iaiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0b1xuICogQHBhcmFtIHtQfSBwcm9wcyBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcmV0dXJucyB7TyAmIFB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24ob2JqLCBwcm9wcykge1xuXHRmb3IgKGxldCBpIGluIHByb3BzKSBvYmpbaV0gPSBwcm9wc1tpXTtcblx0cmV0dXJuIC8qKiBAdHlwZSB7TyAmIFB9ICovIChvYmopO1xufVxuXG4vKipcbiAqIFJlbW92ZSBhIGNoaWxkIG5vZGUgZnJvbSBpdHMgcGFyZW50IGlmIGF0dGFjaGVkLiBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3JcbiAqIElFMTEgd2hpY2ggZG9lc24ndCBzdXBwb3J0IGBFbGVtZW50LnByb3RvdHlwZS5yZW1vdmUoKWAuIFVzaW5nIHRoaXMgZnVuY3Rpb25cbiAqIGlzIHNtYWxsZXIgdGhhbiBpbmNsdWRpbmcgYSBkZWRpY2F0ZWQgcG9seWZpbGwuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gcmVtb3ZlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpIHtcblx0bGV0IHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG5cdGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xufVxuIiwiaW1wb3J0IHsgZGlmZiwgdW5tb3VudCwgYXBwbHlSZWYgfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IGNyZWF0ZVZOb2RlLCBGcmFnbWVudCB9IGZyb20gJy4uL2NyZWF0ZS1lbGVtZW50JztcbmltcG9ydCB7IEVNUFRZX09CSiwgRU1QVFlfQVJSIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHJlbW92ZU5vZGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGdldERvbVNpYmxpbmcgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIERpZmYgdGhlIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHdob3NlXG4gKiBjaGlsZHJlbiBhcmUgYmVpbmcgZGlmZmVkXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbltdfSByZW5kZXJSZXN1bHRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBuZXdQYXJlbnRWTm9kZSBUaGUgbmV3IHZpcnR1YWxcbiAqIG5vZGUgd2hvc2UgY2hpbGRyZW4gc2hvdWxkIGJlIGRpZmYnZWQgYWdhaW5zdCBvbGRQYXJlbnRWTm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG9sZFBhcmVudFZOb2RlIFRoZSBvbGQgdmlydHVhbFxuICogbm9kZSB3aG9zZSBjaGlsZHJlbiBzaG91bGQgYmUgZGlmZidlZCBhZ2FpbnN0IG5ld1BhcmVudFZOb2RlXG4gKiBAcGFyYW0ge29iamVjdH0gZ2xvYmFsQ29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdCAtIG1vZGlmaWVkIGJ5IGdldENoaWxkQ29udGV4dFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50Pn0gZXhjZXNzRG9tQ2hpbGRyZW5cbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7Tm9kZSB8IFRleHR9IG9sZERvbSBUaGUgY3VycmVudCBhdHRhY2hlZCBET01cbiAqIGVsZW1lbnQgYW55IG5ldyBkb20gZWxlbWVudHMgc2hvdWxkIGJlIHBsYWNlZCBhcm91bmQuIExpa2VseSBgbnVsbGAgb24gZmlyc3RcbiAqIHJlbmRlciAoZXhjZXB0IHdoZW4gaHlkcmF0aW5nKS4gQ2FuIGJlIGEgc2libGluZyBET00gZWxlbWVudCB3aGVuIGRpZmZpbmdcbiAqIEZyYWdtZW50cyB0aGF0IGhhdmUgc2libGluZ3MuIEluIG1vc3QgY2FzZXMsIGl0IHN0YXJ0cyBvdXQgYXMgYG9sZENoaWxkcmVuWzBdLl9kb21gLlxuICogQHBhcmFtIHtib29sZWFufSBpc0h5ZHJhdGluZyBXaGV0aGVyIG9yIG5vdCB3ZSBhcmUgaW4gaHlkcmF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmQ2hpbGRyZW4oXG5cdHBhcmVudERvbSxcblx0cmVuZGVyUmVzdWx0LFxuXHRuZXdQYXJlbnRWTm9kZSxcblx0b2xkUGFyZW50Vk5vZGUsXG5cdGdsb2JhbENvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdG9sZERvbSxcblx0aXNIeWRyYXRpbmdcbikge1xuXHRsZXQgaSwgaiwgb2xkVk5vZGUsIGNoaWxkVk5vZGUsIG5ld0RvbSwgZmlyc3RDaGlsZERvbSwgcmVmcztcblxuXHQvLyBUaGlzIGlzIGEgY29tcHJlc3Npb24gb2Ygb2xkUGFyZW50Vk5vZGUhPW51bGwgJiYgb2xkUGFyZW50Vk5vZGUgIT0gRU1QVFlfT0JKICYmIG9sZFBhcmVudFZOb2RlLl9jaGlsZHJlbiB8fCBFTVBUWV9BUlJcblx0Ly8gYXMgRU1QVFlfT0JKLl9jaGlsZHJlbiBzaG91bGQgYmUgYHVuZGVmaW5lZGAuXG5cdGxldCBvbGRDaGlsZHJlbiA9IChvbGRQYXJlbnRWTm9kZSAmJiBvbGRQYXJlbnRWTm9kZS5fY2hpbGRyZW4pIHx8IEVNUFRZX0FSUjtcblxuXHRsZXQgb2xkQ2hpbGRyZW5MZW5ndGggPSBvbGRDaGlsZHJlbi5sZW5ndGg7XG5cblx0Ly8gT25seSBpbiB2ZXJ5IHNwZWNpZmljIHBsYWNlcyBzaG91bGQgdGhpcyBsb2dpYyBiZSBpbnZva2VkICh0b3AgbGV2ZWwgYHJlbmRlcmAgYW5kIGBkaWZmRWxlbWVudE5vZGVzYCkuXG5cdC8vIEknbSB1c2luZyBgRU1QVFlfT0JKYCB0byBzaWduYWwgd2hlbiBgZGlmZkNoaWxkcmVuYCBpcyBpbnZva2VkIGluIHRoZXNlIHNpdHVhdGlvbnMuIEkgY2FuJ3QgdXNlIGBudWxsYFxuXHQvLyBmb3IgdGhpcyBwdXJwb3NlLCBiZWNhdXNlIGBudWxsYCBpcyBhIHZhbGlkIHZhbHVlIGZvciBgb2xkRG9tYCB3aGljaCBjYW4gbWVhbiB0byBza2lwIHRvIHRoaXMgbG9naWNcblx0Ly8gKGUuZy4gaWYgbW91bnRpbmcgYSBuZXcgdHJlZSBpbiB3aGljaCB0aGUgb2xkIERPTSBzaG91bGQgYmUgaWdub3JlZCAodXN1YWxseSBmb3IgRnJhZ21lbnRzKS5cblx0aWYgKG9sZERvbSA9PSBFTVBUWV9PQkopIHtcblx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0b2xkRG9tID0gZXhjZXNzRG9tQ2hpbGRyZW5bMF07XG5cdFx0fSBlbHNlIGlmIChvbGRDaGlsZHJlbkxlbmd0aCkge1xuXHRcdFx0b2xkRG9tID0gZ2V0RG9tU2libGluZyhvbGRQYXJlbnRWTm9kZSwgMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9sZERvbSA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0bmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuID0gW107XG5cdGZvciAoaSA9IDA7IGkgPCByZW5kZXJSZXN1bHQubGVuZ3RoOyBpKyspIHtcblx0XHRjaGlsZFZOb2RlID0gcmVuZGVyUmVzdWx0W2ldO1xuXG5cdFx0aWYgKGNoaWxkVk5vZGUgPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGRWTm9kZSA9PSAnYm9vbGVhbicpIHtcblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBudWxsO1xuXHRcdH1cblx0XHQvLyBJZiB0aGlzIG5ld1ZOb2RlIGlzIGJlaW5nIHJldXNlZCAoZS5nLiA8ZGl2PntyZXVzZX17cmV1c2V9PC9kaXY+KSBpbiB0aGUgc2FtZSBkaWZmLFxuXHRcdC8vIG9yIHdlIGFyZSByZW5kZXJpbmcgYSBjb21wb25lbnQgKGUuZy4gc2V0U3RhdGUpIGNvcHkgdGhlIG9sZFZOb2RlcyBzbyBpdCBjYW4gaGF2ZVxuXHRcdC8vIGl0J3Mgb3duIERPTSAmIGV0Yy4gcG9pbnRlcnNcblx0XHRlbHNlIGlmICh0eXBlb2YgY2hpbGRWTm9kZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGRWTm9kZSA9PSAnbnVtYmVyJykge1xuXHRcdFx0Y2hpbGRWTm9kZSA9IG5ld1BhcmVudFZOb2RlLl9jaGlsZHJlbltpXSA9IGNyZWF0ZVZOb2RlKFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHRjaGlsZFZOb2RlXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZFZOb2RlKSkge1xuXHRcdFx0Y2hpbGRWTm9kZSA9IG5ld1BhcmVudFZOb2RlLl9jaGlsZHJlbltpXSA9IGNyZWF0ZVZOb2RlKFxuXHRcdFx0XHRGcmFnbWVudCxcblx0XHRcdFx0eyBjaGlsZHJlbjogY2hpbGRWTm9kZSB9LFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHRudWxsXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSBpZiAoY2hpbGRWTm9kZS5fZG9tICE9IG51bGwgfHwgY2hpbGRWTm9kZS5fY29tcG9uZW50ICE9IG51bGwpIHtcblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBjcmVhdGVWTm9kZShcblx0XHRcdFx0Y2hpbGRWTm9kZS50eXBlLFxuXHRcdFx0XHRjaGlsZFZOb2RlLnByb3BzLFxuXHRcdFx0XHRjaGlsZFZOb2RlLmtleSxcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0Y2hpbGRWTm9kZS5fb3JpZ2luYWxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNoaWxkVk5vZGUgPSBuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW5baV0gPSBjaGlsZFZOb2RlO1xuXHRcdH1cblxuXHRcdC8vIFRlcnNlciByZW1vdmVzIHRoZSBgY29udGludWVgIGhlcmUgYW5kIHdyYXBzIHRoZSBsb29wIGJvZHlcblx0XHQvLyBpbiBhIGBpZiAoY2hpbGRWTm9kZSkgeyAuLi4gfSBjb25kaXRpb25cblx0XHRpZiAoY2hpbGRWTm9kZSA9PSBudWxsKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjaGlsZFZOb2RlLl9wYXJlbnQgPSBuZXdQYXJlbnRWTm9kZTtcblx0XHRjaGlsZFZOb2RlLl9kZXB0aCA9IG5ld1BhcmVudFZOb2RlLl9kZXB0aCArIDE7XG5cblx0XHQvLyBDaGVjayBpZiB3ZSBmaW5kIGEgY29ycmVzcG9uZGluZyBlbGVtZW50IGluIG9sZENoaWxkcmVuLlxuXHRcdC8vIElmIGZvdW5kLCBkZWxldGUgdGhlIGFycmF5IGl0ZW0gYnkgc2V0dGluZyB0byBgdW5kZWZpbmVkYC5cblx0XHQvLyBXZSB1c2UgYHVuZGVmaW5lZGAsIGFzIGBudWxsYCBpcyByZXNlcnZlZCBmb3IgZW1wdHkgcGxhY2Vob2xkZXJzXG5cdFx0Ly8gKGhvbGVzKS5cblx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xuXG5cdFx0aWYgKFxuXHRcdFx0b2xkVk5vZGUgPT09IG51bGwgfHxcblx0XHRcdChvbGRWTm9kZSAmJlxuXHRcdFx0XHRjaGlsZFZOb2RlLmtleSA9PSBvbGRWTm9kZS5rZXkgJiZcblx0XHRcdFx0Y2hpbGRWTm9kZS50eXBlID09PSBvbGRWTm9kZS50eXBlKVxuXHRcdCkge1xuXHRcdFx0b2xkQ2hpbGRyZW5baV0gPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEVpdGhlciBvbGRWTm9kZSA9PT0gdW5kZWZpbmVkIG9yIG9sZENoaWxkcmVuTGVuZ3RoID4gMCxcblx0XHRcdC8vIHNvIGFmdGVyIHRoaXMgbG9vcCBvbGRWTm9kZSA9PSBudWxsIG9yIG9sZFZOb2RlIGlzIGEgdmFsaWQgdmFsdWUuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgb2xkQ2hpbGRyZW5MZW5ndGg7IGorKykge1xuXHRcdFx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2pdO1xuXHRcdFx0XHQvLyBJZiBjaGlsZFZOb2RlIGlzIHVua2V5ZWQsIHdlIG9ubHkgbWF0Y2ggc2ltaWxhcmx5IHVua2V5ZWQgbm9kZXMsIG90aGVyd2lzZSB3ZSBtYXRjaCBieSBrZXkuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBtYXRjaCBieSB0eXBlIChpbiBlaXRoZXIgY2FzZSkuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRvbGRWTm9kZSAmJlxuXHRcdFx0XHRcdGNoaWxkVk5vZGUua2V5ID09IG9sZFZOb2RlLmtleSAmJlxuXHRcdFx0XHRcdGNoaWxkVk5vZGUudHlwZSA9PT0gb2xkVk5vZGUudHlwZVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRvbGRDaGlsZHJlbltqXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRvbGRWTm9kZSA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0b2xkVk5vZGUgPSBvbGRWTm9kZSB8fCBFTVBUWV9PQko7XG5cblx0XHQvLyBNb3JwaCB0aGUgb2xkIGVsZW1lbnQgaW50byB0aGUgbmV3IG9uZSwgYnV0IGRvbid0IGFwcGVuZCBpdCB0byB0aGUgZG9tIHlldFxuXHRcdG5ld0RvbSA9IGRpZmYoXG5cdFx0XHRwYXJlbnREb20sXG5cdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRnbG9iYWxDb250ZXh0LFxuXHRcdFx0aXNTdmcsXG5cdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0b2xkRG9tLFxuXHRcdFx0aXNIeWRyYXRpbmdcblx0XHQpO1xuXG5cdFx0aWYgKChqID0gY2hpbGRWTm9kZS5yZWYpICYmIG9sZFZOb2RlLnJlZiAhPSBqKSB7XG5cdFx0XHRpZiAoIXJlZnMpIHJlZnMgPSBbXTtcblx0XHRcdGlmIChvbGRWTm9kZS5yZWYpIHJlZnMucHVzaChvbGRWTm9kZS5yZWYsIG51bGwsIGNoaWxkVk5vZGUpO1xuXHRcdFx0cmVmcy5wdXNoKGosIGNoaWxkVk5vZGUuX2NvbXBvbmVudCB8fCBuZXdEb20sIGNoaWxkVk5vZGUpO1xuXHRcdH1cblxuXHRcdGlmIChuZXdEb20gIT0gbnVsbCkge1xuXHRcdFx0aWYgKGZpcnN0Q2hpbGREb20gPT0gbnVsbCkge1xuXHRcdFx0XHRmaXJzdENoaWxkRG9tID0gbmV3RG9tO1xuXHRcdFx0fVxuXG5cdFx0XHRvbGREb20gPSBwbGFjZUNoaWxkKFxuXHRcdFx0XHRwYXJlbnREb20sXG5cdFx0XHRcdGNoaWxkVk5vZGUsXG5cdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRvbGRDaGlsZHJlbixcblx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRcdG5ld0RvbSxcblx0XHRcdFx0b2xkRG9tXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBCcm93c2VycyB3aWxsIGluZmVyIGFuIG9wdGlvbidzIGB2YWx1ZWAgZnJvbSBgdGV4dENvbnRlbnRgIHdoZW5cblx0XHRcdC8vIG5vIHZhbHVlIGlzIHByZXNlbnQuIFRoaXMgZXNzZW50aWFsbHkgYnlwYXNzZXMgb3VyIGNvZGUgdG8gc2V0IGl0XG5cdFx0XHQvLyBsYXRlciBpbiBgZGlmZigpYC4gSXQgd29ya3MgZmluZSBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IGZvciBJRTExXG5cdFx0XHQvLyB3aGVyZSBpdCBicmVha3Mgc2V0dGluZyBgc2VsZWN0LnZhbHVlYC4gVGhlcmUgaXQgd2lsbCBiZSBhbHdheXMgc2V0XG5cdFx0XHQvLyB0byBhbiBlbXB0eSBzdHJpbmcuIFJlLWFwcGx5aW5nIGFuIG9wdGlvbnMgdmFsdWUgd2lsbCBmaXggdGhhdCwgc29cblx0XHRcdC8vIHRoZXJlIGFyZSBwcm9iYWJseSBzb21lIGludGVybmFsIGRhdGEgc3RydWN0dXJlcyB0aGF0IGFyZW4ndFxuXHRcdFx0Ly8gdXBkYXRlZCBwcm9wZXJseS5cblx0XHRcdC8vXG5cdFx0XHQvLyBUbyBmaXggaXQgd2UgbWFrZSBzdXJlIHRvIHJlc2V0IHRoZSBpbmZlcnJlZCB2YWx1ZSwgc28gdGhhdCBvdXIgb3duXG5cdFx0XHQvLyB2YWx1ZSBjaGVjayBpbiBgZGlmZigpYCB3b24ndCBiZSBza2lwcGVkLlxuXHRcdFx0aWYgKCFpc0h5ZHJhdGluZyAmJiBuZXdQYXJlbnRWTm9kZS50eXBlID09ICdvcHRpb24nKSB7XG5cdFx0XHRcdHBhcmVudERvbS52YWx1ZSA9ICcnO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgbmV3UGFyZW50Vk5vZGUudHlwZSA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdC8vIEJlY2F1c2UgdGhlIG5ld1BhcmVudFZOb2RlIGlzIEZyYWdtZW50LWxpa2UsIHdlIG5lZWQgdG8gc2V0IGl0J3Ncblx0XHRcdFx0Ly8gX25leHREb20gcHJvcGVydHkgdG8gdGhlIG5leHRTaWJsaW5nIG9mIGl0cyBsYXN0IGNoaWxkIERPTSBub2RlLlxuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyBgb2xkRG9tYCBjb250YWlucyB0aGUgY29ycmVjdCB2YWx1ZSBoZXJlIGJlY2F1c2UgaWYgdGhlIGxhc3QgY2hpbGRcblx0XHRcdFx0Ly8gaXMgYSBGcmFnbWVudC1saWtlLCB0aGVuIG9sZERvbSBoYXMgYWxyZWFkeSBiZWVuIHNldCB0byB0aGF0IGNoaWxkJ3MgX25leHREb20uXG5cdFx0XHRcdC8vIElmIHRoZSBsYXN0IGNoaWxkIGlzIGEgRE9NIFZOb2RlLCB0aGVuIG9sZERvbSB3aWxsIGJlIHNldCB0byB0aGF0IERPTVxuXHRcdFx0XHQvLyBub2RlJ3MgbmV4dFNpYmxpbmcuXG5cdFx0XHRcdG5ld1BhcmVudFZOb2RlLl9uZXh0RG9tID0gb2xkRG9tO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRvbGREb20gJiZcblx0XHRcdG9sZFZOb2RlLl9kb20gPT0gb2xkRG9tICYmXG5cdFx0XHRvbGREb20ucGFyZW50Tm9kZSAhPSBwYXJlbnREb21cblx0XHQpIHtcblx0XHRcdC8vIFRoZSBhYm92ZSBjb25kaXRpb24gaXMgdG8gaGFuZGxlIG51bGwgcGxhY2Vob2xkZXJzLiBTZWUgdGVzdCBpbiBwbGFjZWhvbGRlci50ZXN0LmpzOlxuXHRcdFx0Ly8gYGVmZmljaWVudGx5IHJlcGxhY2UgbnVsbCBwbGFjZWhvbGRlcnMgaW4gcGFyZW50IHJlcmVuZGVyc2Bcblx0XHRcdG9sZERvbSA9IGdldERvbVNpYmxpbmcob2xkVk5vZGUpO1xuXHRcdH1cblx0fVxuXG5cdG5ld1BhcmVudFZOb2RlLl9kb20gPSBmaXJzdENoaWxkRG9tO1xuXG5cdC8vIFJlbW92ZSBjaGlsZHJlbiB0aGF0IGFyZSBub3QgcGFydCBvZiBhbnkgdm5vZGUuXG5cdGlmIChleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsICYmIHR5cGVvZiBuZXdQYXJlbnRWTm9kZS50eXBlICE9ICdmdW5jdGlvbicpIHtcblx0XHRmb3IgKGkgPSBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGg7IGktLTsgKSB7XG5cdFx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW5baV0gIT0gbnVsbCkgcmVtb3ZlTm9kZShleGNlc3NEb21DaGlsZHJlbltpXSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHJlbWFpbmluZyBvbGRDaGlsZHJlbiBpZiB0aGVyZSBhcmUgYW55LlxuXHRmb3IgKGkgPSBvbGRDaGlsZHJlbkxlbmd0aDsgaS0tOyApIHtcblx0XHRpZiAob2xkQ2hpbGRyZW5baV0gIT0gbnVsbCkgdW5tb3VudChvbGRDaGlsZHJlbltpXSwgb2xkQ2hpbGRyZW5baV0pO1xuXHR9XG5cblx0Ly8gU2V0IHJlZnMgb25seSBhZnRlciB1bm1vdW50XG5cdGlmIChyZWZzKSB7XG5cdFx0Zm9yIChpID0gMDsgaSA8IHJlZnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGFwcGx5UmVmKHJlZnNbaV0sIHJlZnNbKytpXSwgcmVmc1srK2ldKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBGbGF0dGVuIGFuZCBsb29wIHRocm91Z2ggdGhlIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbn0gY2hpbGRyZW4gVGhlIHVuZmxhdHRlbmVkXG4gKiBjaGlsZHJlbiBvZiBhIHZpcnR1YWwgbm9kZVxuICogQHJldHVybnMge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9DaGlsZEFycmF5KGNoaWxkcmVuLCBvdXQpIHtcblx0b3V0ID0gb3V0IHx8IFtdO1xuXHRpZiAoY2hpbGRyZW4gPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGRyZW4gPT0gJ2Jvb2xlYW4nKSB7XG5cdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcblx0XHRjaGlsZHJlbi5zb21lKGNoaWxkID0+IHtcblx0XHRcdHRvQ2hpbGRBcnJheShjaGlsZCwgb3V0KTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvdXQucHVzaChjaGlsZHJlbik7XG5cdH1cblx0cmV0dXJuIG91dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBsYWNlQ2hpbGQoXG5cdHBhcmVudERvbSxcblx0Y2hpbGRWTm9kZSxcblx0b2xkVk5vZGUsXG5cdG9sZENoaWxkcmVuLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0bmV3RG9tLFxuXHRvbGREb21cbikge1xuXHRsZXQgbmV4dERvbTtcblx0aWYgKGNoaWxkVk5vZGUuX25leHREb20gIT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIE9ubHkgRnJhZ21lbnRzIG9yIGNvbXBvbmVudHMgdGhhdCByZXR1cm4gRnJhZ21lbnQgbGlrZSBWTm9kZXMgd2lsbFxuXHRcdC8vIGhhdmUgYSBub24tdW5kZWZpbmVkIF9uZXh0RG9tLiBDb250aW51ZSB0aGUgZGlmZiBmcm9tIHRoZSBzaWJsaW5nXG5cdFx0Ly8gb2YgbGFzdCBET00gY2hpbGQgb2YgdGhpcyBjaGlsZCBWTm9kZVxuXHRcdG5leHREb20gPSBjaGlsZFZOb2RlLl9uZXh0RG9tO1xuXG5cdFx0Ly8gRWFnZXJseSBjbGVhbnVwIF9uZXh0RG9tLiBXZSBkb24ndCBuZWVkIHRvIHBlcnNpc3QgdGhlIHZhbHVlIGJlY2F1c2Vcblx0XHQvLyBpdCBpcyBvbmx5IHVzZWQgYnkgYGRpZmZDaGlsZHJlbmAgdG8gZGV0ZXJtaW5lIHdoZXJlIHRvIHJlc3VtZSB0aGUgZGlmZiBhZnRlclxuXHRcdC8vIGRpZmZpbmcgQ29tcG9uZW50cyBhbmQgRnJhZ21lbnRzLiBPbmNlIHdlIHN0b3JlIGl0IHRoZSBuZXh0RE9NIGxvY2FsIHZhciwgd2Vcblx0XHQvLyBjYW4gY2xlYW4gdXAgdGhlIHByb3BlcnR5XG5cdFx0Y2hpbGRWTm9kZS5fbmV4dERvbSA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmIChcblx0XHRleGNlc3NEb21DaGlsZHJlbiA9PSBvbGRWTm9kZSB8fFxuXHRcdG5ld0RvbSAhPSBvbGREb20gfHxcblx0XHRuZXdEb20ucGFyZW50Tm9kZSA9PSBudWxsXG5cdCkge1xuXHRcdC8vIE5PVEU6IGV4Y2Vzc0RvbUNoaWxkcmVuPT1vbGRWTm9kZSBhYm92ZTpcblx0XHQvLyBUaGlzIGlzIGEgY29tcHJlc3Npb24gb2YgZXhjZXNzRG9tQ2hpbGRyZW49PW51bGwgJiYgb2xkVk5vZGU9PW51bGwhXG5cdFx0Ly8gVGhlIHZhbHVlcyBvbmx5IGhhdmUgdGhlIHNhbWUgdHlwZSB3aGVuIGBudWxsYC5cblxuXHRcdG91dGVyOiBpZiAob2xkRG9tID09IG51bGwgfHwgb2xkRG9tLnBhcmVudE5vZGUgIT09IHBhcmVudERvbSkge1xuXHRcdFx0cGFyZW50RG9tLmFwcGVuZENoaWxkKG5ld0RvbSk7XG5cdFx0XHRuZXh0RG9tID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gYGo8b2xkQ2hpbGRyZW5MZW5ndGg7IGorPTJgIGlzIGFuIGFsdGVybmF0aXZlIHRvIGBqKys8b2xkQ2hpbGRyZW5MZW5ndGgvMmBcblx0XHRcdGZvciAoXG5cdFx0XHRcdGxldCBzaWJEb20gPSBvbGREb20sIGogPSAwO1xuXHRcdFx0XHQoc2liRG9tID0gc2liRG9tLm5leHRTaWJsaW5nKSAmJiBqIDwgb2xkQ2hpbGRyZW4ubGVuZ3RoO1xuXHRcdFx0XHRqICs9IDJcblx0XHRcdCkge1xuXHRcdFx0XHRpZiAoc2liRG9tID09IG5ld0RvbSkge1xuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRwYXJlbnREb20uaW5zZXJ0QmVmb3JlKG5ld0RvbSwgb2xkRG9tKTtcblx0XHRcdG5leHREb20gPSBvbGREb207XG5cdFx0fVxuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBwcmUtY2FsY3VsYXRlZCB0aGUgbmV4dERPTSBub2RlLCB1c2UgaXQuIEVsc2UgY2FsY3VsYXRlIGl0IG5vd1xuXHQvLyBTdHJpY3RseSBjaGVjayBmb3IgYHVuZGVmaW5lZGAgaGVyZSBjdXogYG51bGxgIGlzIGEgdmFsaWQgdmFsdWUgb2YgYG5leHREb21gLlxuXHQvLyBTZWUgbW9yZSBkZXRhaWwgaW4gY3JlYXRlLWVsZW1lbnQuanM6Y3JlYXRlVk5vZGVcblx0aWYgKG5leHREb20gIT09IHVuZGVmaW5lZCkge1xuXHRcdG9sZERvbSA9IG5leHREb207XG5cdH0gZWxzZSB7XG5cdFx0b2xkRG9tID0gbmV3RG9tLm5leHRTaWJsaW5nO1xuXHR9XG5cblx0cmV0dXJuIG9sZERvbTtcbn1cbiIsImltcG9ydCB7IElTX05PTl9ESU1FTlNJT05BTCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuLi9vcHRpb25zJztcblxuLyoqXG4gKiBEaWZmIHRoZSBvbGQgYW5kIG5ldyBwcm9wZXJ0aWVzIG9mIGEgVk5vZGUgYW5kIGFwcGx5IGNoYW5nZXMgdG8gdGhlIERPTSBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBkb20gVGhlIERPTSBub2RlIHRvIGFwcGx5XG4gKiBjaGFuZ2VzIHRvXG4gKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHMgVGhlIG5ldyBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IG9sZFByb3BzIFRoZSBvbGQgcHJvcHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGh5ZHJhdGUgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvbiBtb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmUHJvcHMoZG9tLCBuZXdQcm9wcywgb2xkUHJvcHMsIGlzU3ZnLCBoeWRyYXRlKSB7XG5cdGxldCBpO1xuXG5cdGZvciAoaSBpbiBvbGRQcm9wcykge1xuXHRcdGlmIChpICE9PSAnY2hpbGRyZW4nICYmIGkgIT09ICdrZXknICYmICEoaSBpbiBuZXdQcm9wcykpIHtcblx0XHRcdHNldFByb3BlcnR5KGRvbSwgaSwgbnVsbCwgb2xkUHJvcHNbaV0sIGlzU3ZnKTtcblx0XHR9XG5cdH1cblxuXHRmb3IgKGkgaW4gbmV3UHJvcHMpIHtcblx0XHRpZiAoXG5cdFx0XHQoIWh5ZHJhdGUgfHwgdHlwZW9mIG5ld1Byb3BzW2ldID09ICdmdW5jdGlvbicpICYmXG5cdFx0XHRpICE9PSAnY2hpbGRyZW4nICYmXG5cdFx0XHRpICE9PSAna2V5JyAmJlxuXHRcdFx0aSAhPT0gJ3ZhbHVlJyAmJlxuXHRcdFx0aSAhPT0gJ2NoZWNrZWQnICYmXG5cdFx0XHRvbGRQcm9wc1tpXSAhPT0gbmV3UHJvcHNbaV1cblx0XHQpIHtcblx0XHRcdHNldFByb3BlcnR5KGRvbSwgaSwgbmV3UHJvcHNbaV0sIG9sZFByb3BzW2ldLCBpc1N2Zyk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBrZXksIHZhbHVlKSB7XG5cdGlmIChrZXlbMF0gPT09ICctJykge1xuXHRcdHN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuXHR9IGVsc2UgaWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRzdHlsZVtrZXldID0gJyc7XG5cdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9ICdudW1iZXInIHx8IElTX05PTl9ESU1FTlNJT05BTC50ZXN0KGtleSkpIHtcblx0XHRzdHlsZVtrZXldID0gdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGVba2V5XSA9IHZhbHVlICsgJ3B4Jztcblx0fVxufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IHZhbHVlIG9uIGEgRE9NIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIG5vZGUgdG8gbW9kaWZ5XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0XG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgdGhlIHByb3BlcnR5IHRvXG4gKiBAcGFyYW0geyp9IG9sZFZhbHVlIFRoZSBvbGQgdmFsdWUgdGhlIHByb3BlcnR5IGhhZFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlIG9yIG5vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UHJvcGVydHkoZG9tLCBuYW1lLCB2YWx1ZSwgb2xkVmFsdWUsIGlzU3ZnKSB7XG5cdGxldCB1c2VDYXB0dXJlLCBuYW1lTG93ZXIsIHByb3h5O1xuXG5cdGlmIChpc1N2ZyAmJiBuYW1lID09ICdjbGFzc05hbWUnKSBuYW1lID0gJ2NsYXNzJztcblxuXHQvLyBpZiAoaXNTdmcpIHtcblx0Ly8gXHRpZiAobmFtZSA9PT0gJ2NsYXNzTmFtZScpIG5hbWUgPSAnY2xhc3MnO1xuXHQvLyB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGFzcycpIG5hbWUgKz0gJ05hbWUnO1xuXG5cdGlmIChuYW1lID09PSAnc3R5bGUnKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuXHRcdFx0ZG9tLnN0eWxlLmNzc1RleHQgPSB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBvbGRWYWx1ZSA9PSAnc3RyaW5nJykge1xuXHRcdFx0XHRkb20uc3R5bGUuY3NzVGV4dCA9IG9sZFZhbHVlID0gJyc7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvbGRWYWx1ZSkge1xuXHRcdFx0XHRmb3IgKG5hbWUgaW4gb2xkVmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoISh2YWx1ZSAmJiBuYW1lIGluIHZhbHVlKSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUoZG9tLnN0eWxlLCBuYW1lLCAnJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0XHRmb3IgKG5hbWUgaW4gdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIW9sZFZhbHVlIHx8IHZhbHVlW25hbWVdICE9PSBvbGRWYWx1ZVtuYW1lXSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUoZG9tLnN0eWxlLCBuYW1lLCB2YWx1ZVtuYW1lXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdC8vIEJlbmNobWFyayBmb3IgY29tcGFyaXNvbjogaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81NzRjOTU0YmRiOTY1YjlhMDA5NjVhYzZcblx0ZWxzZSBpZiAobmFtZVswXSA9PT0gJ28nICYmIG5hbWVbMV0gPT09ICduJykge1xuXHRcdHVzZUNhcHR1cmUgPSBuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvQ2FwdHVyZSQvLCAnJykpO1xuXHRcdG5hbWVMb3dlciA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRpZiAobmFtZUxvd2VyIGluIGRvbSkgbmFtZSA9IG5hbWVMb3dlcjtcblx0XHRuYW1lID0gbmFtZS5zbGljZSgyKTtcblxuXHRcdGlmICghZG9tLl9saXN0ZW5lcnMpIGRvbS5fbGlzdGVuZXJzID0ge307XG5cdFx0ZG9tLl9saXN0ZW5lcnNbbmFtZSArIHVzZUNhcHR1cmVdID0gdmFsdWU7XG5cblx0XHRwcm94eSA9IHVzZUNhcHR1cmUgPyBldmVudFByb3h5Q2FwdHVyZSA6IGV2ZW50UHJveHk7XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRpZiAoIW9sZFZhbHVlKSBkb20uYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBwcm94eSwgdXNlQ2FwdHVyZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvbS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHByb3h5LCB1c2VDYXB0dXJlKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoXG5cdFx0bmFtZSAhPT0gJ2xpc3QnICYmXG5cdFx0bmFtZSAhPT0gJ3RhZ05hbWUnICYmXG5cdFx0Ly8gSFRNTEJ1dHRvbkVsZW1lbnQuZm9ybSBhbmQgSFRNTElucHV0RWxlbWVudC5mb3JtIGFyZSByZWFkLW9ubHkgYnV0IGNhbiBiZSBzZXQgdXNpbmdcblx0XHQvLyBzZXRBdHRyaWJ1dGVcblx0XHRuYW1lICE9PSAnZm9ybScgJiZcblx0XHRuYW1lICE9PSAndHlwZScgJiZcblx0XHRuYW1lICE9PSAnc2l6ZScgJiZcblx0XHRuYW1lICE9PSAnZG93bmxvYWQnICYmXG5cdFx0bmFtZSAhPT0gJ2hyZWYnICYmXG5cdFx0IWlzU3ZnICYmXG5cdFx0bmFtZSBpbiBkb21cblx0KSB7XG5cdFx0ZG9tW25hbWVdID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG5cdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9ICdmdW5jdGlvbicgJiYgbmFtZSAhPT0gJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJykge1xuXHRcdGlmIChuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgveGxpbms6Py8sICcnKSkpIHtcblx0XHRcdGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0XHRkb20ucmVtb3ZlQXR0cmlidXRlTlMoXG5cdFx0XHRcdFx0J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLFxuXHRcdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG9tLnNldEF0dHJpYnV0ZU5TKFxuXHRcdFx0XHRcdCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcblx0XHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0dmFsdWVcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0dmFsdWUgPT0gbnVsbCB8fFxuXHRcdFx0KHZhbHVlID09PSBmYWxzZSAmJlxuXHRcdFx0XHQvLyBBUklBLWF0dHJpYnV0ZXMgaGF2ZSBhIGRpZmZlcmVudCBub3Rpb24gb2YgYm9vbGVhbiB2YWx1ZXMuXG5cdFx0XHRcdC8vIFRoZSB2YWx1ZSBgZmFsc2VgIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBhdHRyaWJ1dGUgbm90XG5cdFx0XHRcdC8vIGV4aXN0aW5nIG9uIHRoZSBET00sIHNvIHdlIGNhbid0IHJlbW92ZSBpdC4gRm9yIG5vbi1ib29sZWFuXG5cdFx0XHRcdC8vIEFSSUEtYXR0cmlidXRlcyB3ZSBjb3VsZCB0cmVhdCBmYWxzZSBhcyBhIHJlbW92YWwsIGJ1dCB0aGVcblx0XHRcdFx0Ly8gYW1vdW50IG9mIGV4Y2VwdGlvbnMgd291bGQgY29zdCB1cyB0b28gbWFueSBieXRlcy4gT24gdG9wIG9mXG5cdFx0XHRcdC8vIHRoYXQgb3RoZXIgVkRPTSBmcmFtZXdvcmtzIGFsc28gYWx3YXlzIHN0cmluZ2lmeSBgZmFsc2VgLlxuXHRcdFx0XHQhL15hci8udGVzdChuYW1lKSlcblx0XHQpIHtcblx0XHRcdGRvbS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvbS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIFByb3h5IGFuIGV2ZW50IHRvIGhvb2tlZCBldmVudCBoYW5kbGVyc1xuICogQHBhcmFtIHtFdmVudH0gZSBUaGUgZXZlbnQgb2JqZWN0IGZyb20gdGhlIGJyb3dzZXJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGV2ZW50UHJveHkoZSkge1xuXHR0aGlzLl9saXN0ZW5lcnNbZS50eXBlICsgZmFsc2VdKG9wdGlvbnMuZXZlbnQgPyBvcHRpb25zLmV2ZW50KGUpIDogZSk7XG59XG5cbmZ1bmN0aW9uIGV2ZW50UHJveHlDYXB0dXJlKGUpIHtcblx0dGhpcy5fbGlzdGVuZXJzW2UudHlwZSArIHRydWVdKG9wdGlvbnMuZXZlbnQgPyBvcHRpb25zLmV2ZW50KGUpIDogZSk7XG59XG4iLCJpbXBvcnQgeyBFTVBUWV9PQkosIEVNUFRZX0FSUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICcuLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgeyBkaWZmQ2hpbGRyZW4sIHBsYWNlQ2hpbGQgfSBmcm9tICcuL2NoaWxkcmVuJztcbmltcG9ydCB7IGRpZmZQcm9wcywgc2V0UHJvcGVydHkgfSBmcm9tICcuL3Byb3BzJztcbmltcG9ydCB7IGFzc2lnbiwgcmVtb3ZlTm9kZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi4vb3B0aW9ucyc7XG5cbmZ1bmN0aW9uIHJlb3JkZXJDaGlsZHJlbihuZXdWTm9kZSwgb2xkRG9tLCBwYXJlbnREb20pIHtcblx0Zm9yIChsZXQgdG1wID0gMDsgdG1wIDwgbmV3Vk5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgdG1wKyspIHtcblx0XHRjb25zdCB2bm9kZSA9IG5ld1ZOb2RlLl9jaGlsZHJlblt0bXBdO1xuXHRcdGlmICh2bm9kZSkge1xuXHRcdFx0dm5vZGUuX3BhcmVudCA9IG5ld1ZOb2RlO1xuXG5cdFx0XHRpZiAodm5vZGUuX2RvbSkge1xuXHRcdFx0XHRpZiAodHlwZW9mIHZub2RlLnR5cGUgPT0gJ2Z1bmN0aW9uJyAmJiB2bm9kZS5fY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdHJlb3JkZXJDaGlsZHJlbih2bm9kZSwgb2xkRG9tLCBwYXJlbnREb20pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0b2xkRG9tID0gcGxhY2VDaGlsZChcblx0XHRcdFx0XHRwYXJlbnREb20sXG5cdFx0XHRcdFx0dm5vZGUsXG5cdFx0XHRcdFx0dm5vZGUsXG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NoaWxkcmVuLFxuXHRcdFx0XHRcdG51bGwsXG5cdFx0XHRcdFx0dm5vZGUuX2RvbSxcblx0XHRcdFx0XHRvbGREb21cblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAodHlwZW9mIG5ld1ZOb2RlLnR5cGUgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9uZXh0RG9tID0gb2xkRG9tO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyBhbmQgYXBwbHkgcHJvcGVyIGNoYW5nZXMgdG8gdGhlIERPTVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBwYXJlbnQgb2YgdGhlIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gbmV3Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBvbGRWTm9kZSBUaGUgb2xkIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IGdsb2JhbENvbnRleHQgVGhlIGN1cnJlbnQgY29udGV4dCBvYmplY3QuIE1vZGlmaWVkIGJ5IGdldENoaWxkQ29udGV4dFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIGVsZW1lbnQgaXMgYW4gU1ZHIG5vZGVcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnQ+fSBleGNlc3NEb21DaGlsZHJlblxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuQ29tcG9uZW50Pn0gY29tbWl0UXVldWUgTGlzdCBvZiBjb21wb25lbnRzXG4gKiB3aGljaCBoYXZlIGNhbGxiYWNrcyB0byBpbnZva2UgaW4gY29tbWl0Um9vdFxuICogQHBhcmFtIHtFbGVtZW50IHwgVGV4dH0gb2xkRG9tIFRoZSBjdXJyZW50IGF0dGFjaGVkIERPTVxuICogZWxlbWVudCBhbnkgbmV3IGRvbSBlbGVtZW50cyBzaG91bGQgYmUgcGxhY2VkIGFyb3VuZC4gTGlrZWx5IGBudWxsYCBvbiBmaXJzdFxuICogcmVuZGVyIChleGNlcHQgd2hlbiBoeWRyYXRpbmcpLiBDYW4gYmUgYSBzaWJsaW5nIERPTSBlbGVtZW50IHdoZW4gZGlmZmluZ1xuICogRnJhZ21lbnRzIHRoYXQgaGF2ZSBzaWJsaW5ncy4gSW4gbW9zdCBjYXNlcywgaXQgc3RhcnRzIG91dCBhcyBgb2xkQ2hpbGRyZW5bMF0uX2RvbWAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0h5ZHJhdGluZ10gV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZihcblx0cGFyZW50RG9tLFxuXHRuZXdWTm9kZSxcblx0b2xkVk5vZGUsXG5cdGdsb2JhbENvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdG9sZERvbSxcblx0aXNIeWRyYXRpbmdcbikge1xuXHRsZXQgdG1wLFxuXHRcdG5ld1R5cGUgPSBuZXdWTm9kZS50eXBlO1xuXG5cdC8vIFdoZW4gcGFzc2luZyB0aHJvdWdoIGNyZWF0ZUVsZW1lbnQgaXQgYXNzaWducyB0aGUgb2JqZWN0XG5cdC8vIGNvbnN0cnVjdG9yIGFzIHVuZGVmaW5lZC4gVGhpcyB0byBwcmV2ZW50IEpTT04taW5qZWN0aW9uLlxuXHRpZiAobmV3Vk5vZGUuY29uc3RydWN0b3IgIT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG5cblx0Ly8gSWYgdGhlIHByZXZpb3VzIGRpZmYgYmFpbGVkIG91dCwgcmVzdW1lIGNyZWF0aW5nL2h5ZHJhdGluZy5cblx0aWYgKG9sZFZOb2RlLl9oeWRyYXRpbmcgIT0gbnVsbCkge1xuXHRcdGlzSHlkcmF0aW5nID0gb2xkVk5vZGUuX2h5ZHJhdGluZztcblx0XHRvbGREb20gPSBuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHQvLyBpZiB3ZSByZXN1bWUsIHdlIHdhbnQgdGhlIHRyZWUgdG8gYmUgXCJ1bmxvY2tlZFwiXG5cdFx0bmV3Vk5vZGUuX2h5ZHJhdGluZyA9IG51bGw7XG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPSBbb2xkRG9tXTtcblx0fVxuXG5cdGlmICgodG1wID0gb3B0aW9ucy5fZGlmZikpIHRtcChuZXdWTm9kZSk7XG5cblx0dHJ5IHtcblx0XHRvdXRlcjogaWYgKHR5cGVvZiBuZXdUeXBlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdGxldCBjLCBpc05ldywgb2xkUHJvcHMsIG9sZFN0YXRlLCBzbmFwc2hvdCwgY2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uO1xuXHRcdFx0bGV0IG5ld1Byb3BzID0gbmV3Vk5vZGUucHJvcHM7XG5cblx0XHRcdC8vIE5lY2Vzc2FyeSBmb3IgY3JlYXRlQ29udGV4dCBhcGkuIFNldHRpbmcgdGhpcyBwcm9wZXJ0eSB3aWxsIHBhc3Ncblx0XHRcdC8vIHRoZSBjb250ZXh0IHZhbHVlIGFzIGB0aGlzLmNvbnRleHRgIGp1c3QgZm9yIHRoaXMgY29tcG9uZW50LlxuXHRcdFx0dG1wID0gbmV3VHlwZS5jb250ZXh0VHlwZTtcblx0XHRcdGxldCBwcm92aWRlciA9IHRtcCAmJiBnbG9iYWxDb250ZXh0W3RtcC5faWRdO1xuXHRcdFx0bGV0IGNvbXBvbmVudENvbnRleHQgPSB0bXBcblx0XHRcdFx0PyBwcm92aWRlclxuXHRcdFx0XHRcdD8gcHJvdmlkZXIucHJvcHMudmFsdWVcblx0XHRcdFx0XHQ6IHRtcC5fZGVmYXVsdFZhbHVlXG5cdFx0XHRcdDogZ2xvYmFsQ29udGV4dDtcblxuXHRcdFx0Ly8gR2V0IGNvbXBvbmVudCBhbmQgc2V0IGl0IHRvIGBjYFxuXHRcdFx0aWYgKG9sZFZOb2RlLl9jb21wb25lbnQpIHtcblx0XHRcdFx0YyA9IG5ld1ZOb2RlLl9jb21wb25lbnQgPSBvbGRWTm9kZS5fY29tcG9uZW50O1xuXHRcdFx0XHRjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24gPSBjLl9wcm9jZXNzaW5nRXhjZXB0aW9uID0gYy5fcGVuZGluZ0Vycm9yO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSW5zdGFudGlhdGUgdGhlIG5ldyBjb21wb25lbnRcblx0XHRcdFx0aWYgKCdwcm90b3R5cGUnIGluIG5ld1R5cGUgJiYgbmV3VHlwZS5wcm90b3R5cGUucmVuZGVyKSB7XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NvbXBvbmVudCA9IGMgPSBuZXcgbmV3VHlwZShuZXdQcm9wcywgY29tcG9uZW50Q29udGV4dCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jb21wb25lbnQgPSBjID0gbmV3IENvbXBvbmVudChuZXdQcm9wcywgY29tcG9uZW50Q29udGV4dCk7XG5cdFx0XHRcdFx0Yy5jb25zdHJ1Y3RvciA9IG5ld1R5cGU7XG5cdFx0XHRcdFx0Yy5yZW5kZXIgPSBkb1JlbmRlcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHJvdmlkZXIpIHByb3ZpZGVyLnN1YihjKTtcblxuXHRcdFx0XHRjLnByb3BzID0gbmV3UHJvcHM7XG5cdFx0XHRcdGlmICghYy5zdGF0ZSkgYy5zdGF0ZSA9IHt9O1xuXHRcdFx0XHRjLmNvbnRleHQgPSBjb21wb25lbnRDb250ZXh0O1xuXHRcdFx0XHRjLl9nbG9iYWxDb250ZXh0ID0gZ2xvYmFsQ29udGV4dDtcblx0XHRcdFx0aXNOZXcgPSBjLl9kaXJ0eSA9IHRydWU7XG5cdFx0XHRcdGMuX3JlbmRlckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbnZva2UgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXG5cdFx0XHRpZiAoYy5fbmV4dFN0YXRlID09IG51bGwpIHtcblx0XHRcdFx0Yy5fbmV4dFN0YXRlID0gYy5zdGF0ZTtcblx0XHRcdH1cblx0XHRcdGlmIChuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPSBudWxsKSB7XG5cdFx0XHRcdGlmIChjLl9uZXh0U3RhdGUgPT0gYy5zdGF0ZSkge1xuXHRcdFx0XHRcdGMuX25leHRTdGF0ZSA9IGFzc2lnbih7fSwgYy5fbmV4dFN0YXRlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFzc2lnbihcblx0XHRcdFx0XHRjLl9uZXh0U3RhdGUsXG5cdFx0XHRcdFx0bmV3VHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV3UHJvcHMsIGMuX25leHRTdGF0ZSlcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0b2xkUHJvcHMgPSBjLnByb3BzO1xuXHRcdFx0b2xkU3RhdGUgPSBjLnN0YXRlO1xuXG5cdFx0XHQvLyBJbnZva2UgcHJlLXJlbmRlciBsaWZlY3ljbGUgbWV0aG9kc1xuXHRcdFx0aWYgKGlzTmV3KSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PSBudWxsICYmXG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsTW91bnQgIT0gbnVsbFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxNb3VudCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50RGlkTW91bnQgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGMuY29tcG9uZW50RGlkTW91bnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0bmV3VHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT0gbnVsbCAmJlxuXHRcdFx0XHRcdG5ld1Byb3BzICE9PSBvbGRQcm9wcyAmJlxuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgY29tcG9uZW50Q29udGV4dCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0KCFjLl9mb3JjZSAmJlxuXHRcdFx0XHRcdFx0Yy5zaG91bGRDb21wb25lbnRVcGRhdGUgIT0gbnVsbCAmJlxuXHRcdFx0XHRcdFx0Yy5zaG91bGRDb21wb25lbnRVcGRhdGUoXG5cdFx0XHRcdFx0XHRcdG5ld1Byb3BzLFxuXHRcdFx0XHRcdFx0XHRjLl9uZXh0U3RhdGUsXG5cdFx0XHRcdFx0XHRcdGNvbXBvbmVudENvbnRleHRcblx0XHRcdFx0XHRcdCkgPT09IGZhbHNlKSB8fFxuXHRcdFx0XHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9PT0gb2xkVk5vZGUuX29yaWdpbmFsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXHRcdFx0XHRcdC8vIE1vcmUgaW5mbyBhYm91dCB0aGlzIGhlcmU6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0pvdmlEZUNyb29jay9iZWM1ZjJjZTkzNTQ0ZDJlNjA3MGVmOGUwMDM2ZTRlOFxuXHRcdFx0XHRcdGlmIChuZXdWTm9kZS5fb3JpZ2luYWwgIT09IG9sZFZOb2RlLl9vcmlnaW5hbCkgYy5fZGlydHkgPSBmYWxzZTtcblx0XHRcdFx0XHRjLl92bm9kZSA9IG5ld1ZOb2RlO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9kb20gPSBvbGRWTm9kZS5fZG9tO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IG9sZFZOb2RlLl9jaGlsZHJlbjtcblx0XHRcdFx0XHRpZiAoYy5fcmVuZGVyQ2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Y29tbWl0UXVldWUucHVzaChjKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZW9yZGVyQ2hpbGRyZW4obmV3Vk5vZGUsIG9sZERvbSwgcGFyZW50RG9tKTtcblx0XHRcdFx0XHRicmVhayBvdXRlcjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjLmNvbXBvbmVudFdpbGxVcGRhdGUgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFVwZGF0ZShuZXdQcm9wcywgYy5fbmV4dFN0YXRlLCBjb21wb25lbnRDb250ZXh0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjLmNvbXBvbmVudERpZFVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goKCkgPT4ge1xuXHRcdFx0XHRcdFx0Yy5jb21wb25lbnREaWRVcGRhdGUob2xkUHJvcHMsIG9sZFN0YXRlLCBzbmFwc2hvdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Yy5jb250ZXh0ID0gY29tcG9uZW50Q29udGV4dDtcblx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdGMuc3RhdGUgPSBjLl9uZXh0U3RhdGU7XG5cblx0XHRcdGlmICgodG1wID0gb3B0aW9ucy5fcmVuZGVyKSkgdG1wKG5ld1ZOb2RlKTtcblxuXHRcdFx0Yy5fZGlydHkgPSBmYWxzZTtcblx0XHRcdGMuX3Zub2RlID0gbmV3Vk5vZGU7XG5cdFx0XHRjLl9wYXJlbnREb20gPSBwYXJlbnREb207XG5cblx0XHRcdHRtcCA9IGMucmVuZGVyKGMucHJvcHMsIGMuc3RhdGUsIGMuY29udGV4dCk7XG5cblx0XHRcdC8vIEhhbmRsZSBzZXRTdGF0ZSBjYWxsZWQgaW4gcmVuZGVyLCBzZWUgIzI1NTNcblx0XHRcdGMuc3RhdGUgPSBjLl9uZXh0U3RhdGU7XG5cblx0XHRcdGlmIChjLmdldENoaWxkQ29udGV4dCAhPSBudWxsKSB7XG5cdFx0XHRcdGdsb2JhbENvbnRleHQgPSBhc3NpZ24oYXNzaWduKHt9LCBnbG9iYWxDb250ZXh0KSwgYy5nZXRDaGlsZENvbnRleHQoKSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghaXNOZXcgJiYgYy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRcdHNuYXBzaG90ID0gYy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShvbGRQcm9wcywgb2xkU3RhdGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgaXNUb3BMZXZlbEZyYWdtZW50ID1cblx0XHRcdFx0dG1wICE9IG51bGwgJiYgdG1wLnR5cGUgPT0gRnJhZ21lbnQgJiYgdG1wLmtleSA9PSBudWxsO1xuXHRcdFx0bGV0IHJlbmRlclJlc3VsdCA9IGlzVG9wTGV2ZWxGcmFnbWVudCA/IHRtcC5wcm9wcy5jaGlsZHJlbiA6IHRtcDtcblxuXHRcdFx0ZGlmZkNoaWxkcmVuKFxuXHRcdFx0XHRwYXJlbnREb20sXG5cdFx0XHRcdEFycmF5LmlzQXJyYXkocmVuZGVyUmVzdWx0KSA/IHJlbmRlclJlc3VsdCA6IFtyZW5kZXJSZXN1bHRdLFxuXHRcdFx0XHRuZXdWTm9kZSxcblx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdGdsb2JhbENvbnRleHQsXG5cdFx0XHRcdGlzU3ZnLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdG9sZERvbSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cblx0XHRcdGMuYmFzZSA9IG5ld1ZOb2RlLl9kb207XG5cblx0XHRcdC8vIFdlIHN1Y2Nlc3NmdWxseSByZW5kZXJlZCB0aGlzIFZOb2RlLCB1bnNldCBhbnkgc3RvcmVkIGh5ZHJhdGlvbi9iYWlsb3V0IHN0YXRlOlxuXHRcdFx0bmV3Vk5vZGUuX2h5ZHJhdGluZyA9IG51bGw7XG5cblx0XHRcdGlmIChjLl9yZW5kZXJDYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbW1pdFF1ZXVlLnB1c2goYyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24pIHtcblx0XHRcdFx0Yy5fcGVuZGluZ0Vycm9yID0gYy5fcHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGMuX2ZvcmNlID0gZmFsc2U7XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID09IG51bGwgJiZcblx0XHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9PT0gb2xkVk5vZGUuX29yaWdpbmFsXG5cdFx0KSB7XG5cdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBvbGRWTm9kZS5fY2hpbGRyZW47XG5cdFx0XHRuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV3Vk5vZGUuX2RvbSA9IGRpZmZFbGVtZW50Tm9kZXMoXG5cdFx0XHRcdG9sZFZOb2RlLl9kb20sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCh0bXAgPSBvcHRpb25zLmRpZmZlZCkpIHRtcChuZXdWTm9kZSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRuZXdWTm9kZS5fb3JpZ2luYWwgPSBudWxsO1xuXHRcdC8vIGlmIGh5ZHJhdGluZyBvciBjcmVhdGluZyBpbml0aWFsIHRyZWUsIGJhaWxvdXQgcHJlc2VydmVzIERPTTpcblx0XHRpZiAoaXNIeWRyYXRpbmcgfHwgZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0bmV3Vk5vZGUuX2RvbSA9IG9sZERvbTtcblx0XHRcdG5ld1ZOb2RlLl9oeWRyYXRpbmcgPSAhIWlzSHlkcmF0aW5nO1xuXHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW5bZXhjZXNzRG9tQ2hpbGRyZW4uaW5kZXhPZihvbGREb20pXSA9IG51bGw7XG5cdFx0XHQvLyBeIGNvdWxkIHBvc3NpYmx5IGJlIHNpbXBsaWZpZWQgdG86XG5cdFx0XHQvLyBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGggPSAwO1xuXHRcdH1cblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIG5ld1ZOb2RlLCBvbGRWTm9kZSk7XG5cdH1cblxuXHRyZXR1cm4gbmV3Vk5vZGUuX2RvbTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gcm9vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0Um9vdChjb21taXRRdWV1ZSwgcm9vdCkge1xuXHRpZiAob3B0aW9ucy5fY29tbWl0KSBvcHRpb25zLl9jb21taXQocm9vdCwgY29tbWl0UXVldWUpO1xuXG5cdGNvbW1pdFF1ZXVlLnNvbWUoYyA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbW1pdFF1ZXVlID0gYy5fcmVuZGVyQ2FsbGJhY2tzO1xuXHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHRjb21taXRRdWV1ZS5zb21lKGNiID0+IHtcblx0XHRcdFx0Y2IuY2FsbChjKTtcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgYy5fdm5vZGUpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyByZXByZXNlbnRpbmcgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nXG4gKiB0aGUgdmlydHVhbCBub2RlcyBiZWluZyBkaWZmZWRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBuZXdWTm9kZSBUaGUgbmV3IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG9sZFZOb2RlIFRoZSBvbGQgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gZ2xvYmFsQ29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0geyp9IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzSHlkcmF0aW5nIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZGlmZkVsZW1lbnROb2Rlcyhcblx0ZG9tLFxuXHRuZXdWTm9kZSxcblx0b2xkVk5vZGUsXG5cdGdsb2JhbENvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IGk7XG5cdGxldCBvbGRQcm9wcyA9IG9sZFZOb2RlLnByb3BzO1xuXHRsZXQgbmV3UHJvcHMgPSBuZXdWTm9kZS5wcm9wcztcblxuXHQvLyBUcmFja3MgZW50ZXJpbmcgYW5kIGV4aXRpbmcgU1ZHIG5hbWVzcGFjZSB3aGVuIGRlc2NlbmRpbmcgdGhyb3VnaCB0aGUgdHJlZS5cblx0aXNTdmcgPSBuZXdWTm9kZS50eXBlID09PSAnc3ZnJyB8fCBpc1N2ZztcblxuXHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdGZvciAoaSA9IDA7IGkgPCBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY2hpbGQgPSBleGNlc3NEb21DaGlsZHJlbltpXTtcblxuXHRcdFx0Ly8gaWYgbmV3Vk5vZGUgbWF0Y2hlcyBhbiBlbGVtZW50IGluIGV4Y2Vzc0RvbUNoaWxkcmVuIG9yIHRoZSBgZG9tYFxuXHRcdFx0Ly8gYXJndW1lbnQgbWF0Y2hlcyBhbiBlbGVtZW50IGluIGV4Y2Vzc0RvbUNoaWxkcmVuLCByZW1vdmUgaXQgZnJvbVxuXHRcdFx0Ly8gZXhjZXNzRG9tQ2hpbGRyZW4gc28gaXQgaXNuJ3QgbGF0ZXIgcmVtb3ZlZCBpbiBkaWZmQ2hpbGRyZW5cblx0XHRcdGlmIChcblx0XHRcdFx0Y2hpbGQgIT0gbnVsbCAmJlxuXHRcdFx0XHQoKG5ld1ZOb2RlLnR5cGUgPT09IG51bGxcblx0XHRcdFx0XHQ/IGNoaWxkLm5vZGVUeXBlID09PSAzXG5cdFx0XHRcdFx0OiBjaGlsZC5sb2NhbE5hbWUgPT09IG5ld1ZOb2RlLnR5cGUpIHx8XG5cdFx0XHRcdFx0ZG9tID09IGNoaWxkKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGRvbSA9IGNoaWxkO1xuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbltpXSA9IG51bGw7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChkb20gPT0gbnVsbCkge1xuXHRcdGlmIChuZXdWTm9kZS50eXBlID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3UHJvcHMpO1xuXHRcdH1cblxuXHRcdGRvbSA9IGlzU3ZnXG5cdFx0XHQ/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBuZXdWTm9kZS50eXBlKVxuXHRcdFx0OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdG5ld1ZOb2RlLnR5cGUsXG5cdFx0XHRcdFx0bmV3UHJvcHMuaXMgJiYgeyBpczogbmV3UHJvcHMuaXMgfVxuXHRcdFx0ICApO1xuXHRcdC8vIHdlIGNyZWF0ZWQgYSBuZXcgcGFyZW50LCBzbyBub25lIG9mIHRoZSBwcmV2aW91c2x5IGF0dGFjaGVkIGNoaWxkcmVuIGNhbiBiZSByZXVzZWQ6XG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPSBudWxsO1xuXHRcdC8vIHdlIGFyZSBjcmVhdGluZyBhIG5ldyBub2RlLCBzbyB3ZSBjYW4gYXNzdW1lIHRoaXMgaXMgYSBuZXcgc3VidHJlZSAoaW4gY2FzZSB3ZSBhcmUgaHlkcmF0aW5nKSwgdGhpcyBkZW9wdHMgdGhlIGh5ZHJhdGVcblx0XHRpc0h5ZHJhdGluZyA9IGZhbHNlO1xuXHR9XG5cblx0aWYgKG5ld1ZOb2RlLnR5cGUgPT09IG51bGwpIHtcblx0XHQvLyBEdXJpbmcgaHlkcmF0aW9uLCB3ZSBzdGlsbCBoYXZlIHRvIHNwbGl0IG1lcmdlZCB0ZXh0IGZyb20gU1NSJ2QgSFRNTC5cblx0XHRpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzICYmICghaXNIeWRyYXRpbmcgfHwgZG9tLmRhdGEgIT09IG5ld1Byb3BzKSkge1xuXHRcdFx0ZG9tLmRhdGEgPSBuZXdQcm9wcztcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID0gRU1QVFlfQVJSLnNsaWNlLmNhbGwoZG9tLmNoaWxkTm9kZXMpO1xuXHRcdH1cblxuXHRcdG9sZFByb3BzID0gb2xkVk5vZGUucHJvcHMgfHwgRU1QVFlfT0JKO1xuXG5cdFx0bGV0IG9sZEh0bWwgPSBvbGRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcblx0XHRsZXQgbmV3SHRtbCA9IG5ld1Byb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuXG5cdFx0Ly8gRHVyaW5nIGh5ZHJhdGlvbiwgcHJvcHMgYXJlIG5vdCBkaWZmZWQgYXQgYWxsIChpbmNsdWRpbmcgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpXG5cdFx0Ly8gQFRPRE8gd2Ugc2hvdWxkIHdhcm4gaW4gZGVidWcgbW9kZSB3aGVuIHByb3BzIGRvbid0IG1hdGNoIGhlcmUuXG5cdFx0aWYgKCFpc0h5ZHJhdGluZykge1xuXHRcdFx0Ly8gQnV0LCBpZiB3ZSBhcmUgaW4gYSBzaXR1YXRpb24gd2hlcmUgd2UgYXJlIHVzaW5nIGV4aXN0aW5nIERPTSAoZS5nLiByZXBsYWNlTm9kZSlcblx0XHRcdC8vIHdlIHNob3VsZCByZWFkIHRoZSBleGlzdGluZyBET00gYXR0cmlidXRlcyB0byBkaWZmIHRoZW1cblx0XHRcdGlmIChleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRcdG9sZFByb3BzID0ge307XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvbGRQcm9wc1tkb20uYXR0cmlidXRlc1tpXS5uYW1lXSA9IGRvbS5hdHRyaWJ1dGVzW2ldLnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChuZXdIdG1sIHx8IG9sZEh0bWwpIHtcblx0XHRcdFx0Ly8gQXZvaWQgcmUtYXBwbHlpbmcgdGhlIHNhbWUgJ19faHRtbCcgaWYgaXQgZGlkIG5vdCBjaGFuZ2VkIGJldHdlZW4gcmUtcmVuZGVyXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhbmV3SHRtbCB8fFxuXHRcdFx0XHRcdCgoIW9sZEh0bWwgfHwgbmV3SHRtbC5fX2h0bWwgIT0gb2xkSHRtbC5fX2h0bWwpICYmXG5cdFx0XHRcdFx0XHRuZXdIdG1sLl9faHRtbCAhPT0gZG9tLmlubmVySFRNTClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0ZG9tLmlubmVySFRNTCA9IChuZXdIdG1sICYmIG5ld0h0bWwuX19odG1sKSB8fCAnJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGRpZmZQcm9wcyhkb20sIG5ld1Byb3BzLCBvbGRQcm9wcywgaXNTdmcsIGlzSHlkcmF0aW5nKTtcblxuXHRcdC8vIElmIHRoZSBuZXcgdm5vZGUgZGlkbid0IGhhdmUgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsIGRpZmYgaXRzIGNoaWxkcmVuXG5cdFx0aWYgKG5ld0h0bWwpIHtcblx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IFtdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpID0gbmV3Vk5vZGUucHJvcHMuY2hpbGRyZW47XG5cdFx0XHRkaWZmQ2hpbGRyZW4oXG5cdFx0XHRcdGRvbSxcblx0XHRcdFx0QXJyYXkuaXNBcnJheShpKSA/IGkgOiBbaV0sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdFx0bmV3Vk5vZGUudHlwZSA9PT0gJ2ZvcmVpZ25PYmplY3QnID8gZmFsc2UgOiBpc1N2Zyxcblx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0XHRFTVBUWV9PQkosXG5cdFx0XHRcdGlzSHlkcmF0aW5nXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIChhcyBhYm92ZSwgZG9uJ3QgZGlmZiBwcm9wcyBkdXJpbmcgaHlkcmF0aW9uKVxuXHRcdGlmICghaXNIeWRyYXRpbmcpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0J3ZhbHVlJyBpbiBuZXdQcm9wcyAmJlxuXHRcdFx0XHQoaSA9IG5ld1Byb3BzLnZhbHVlKSAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdC8vICMyNzU2IEZvciB0aGUgPHByb2dyZXNzPi1lbGVtZW50IHRoZSBpbml0aWFsIHZhbHVlIGlzIDAsXG5cdFx0XHRcdC8vIGRlc3BpdGUgdGhlIGF0dHJpYnV0ZSBub3QgYmVpbmcgcHJlc2VudC4gV2hlbiB0aGUgYXR0cmlidXRlXG5cdFx0XHRcdC8vIGlzIG1pc3NpbmcgdGhlIHByb2dyZXNzIGJhciBpcyB0cmVhdGVkIGFzIGluZGV0ZXJtaW5hdGUuXG5cdFx0XHRcdC8vIFRvIGZpeCB0aGF0IHdlJ2xsIGFsd2F5cyB1cGRhdGUgaXQgd2hlbiBpdCBpcyAwIGZvciBwcm9ncmVzcyBlbGVtZW50c1xuXHRcdFx0XHQoaSAhPT0gZG9tLnZhbHVlIHx8IChuZXdWTm9kZS50eXBlID09PSAncHJvZ3Jlc3MnICYmICFpKSlcblx0XHRcdCkge1xuXHRcdFx0XHRzZXRQcm9wZXJ0eShkb20sICd2YWx1ZScsIGksIG9sZFByb3BzLnZhbHVlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCdjaGVja2VkJyBpbiBuZXdQcm9wcyAmJlxuXHRcdFx0XHQoaSA9IG5ld1Byb3BzLmNoZWNrZWQpICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0aSAhPT0gZG9tLmNoZWNrZWRcblx0XHRcdCkge1xuXHRcdFx0XHRzZXRQcm9wZXJ0eShkb20sICdjaGVja2VkJywgaSwgb2xkUHJvcHMuY2hlY2tlZCwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBkb207XG59XG5cbi8qKlxuICogSW52b2tlIG9yIHVwZGF0ZSBhIHJlZiwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgaXQgaXMgYSBmdW5jdGlvbiBvciBvYmplY3QgcmVmLlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHJlZlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UmVmKHJlZiwgdmFsdWUsIHZub2RlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKHR5cGVvZiByZWYgPT0gJ2Z1bmN0aW9uJykgcmVmKHZhbHVlKTtcblx0XHRlbHNlIHJlZi5jdXJyZW50ID0gdmFsdWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIHZub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIFVubW91bnQgYSB2aXJ0dWFsIG5vZGUgZnJvbSB0aGUgdHJlZSBhbmQgYXBwbHkgRE9NIGNoYW5nZXNcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHVubW91bnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBwYXJlbnRWTm9kZSBUaGUgcGFyZW50IG9mIHRoZSBWTm9kZSB0aGF0XG4gKiBpbml0aWF0ZWQgdGhlIHVubW91bnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBSZW1vdmVdIEZsYWcgdGhhdCBpbmRpY2F0ZXMgdGhhdCBhIHBhcmVudCBub2RlIG9mIHRoZVxuICogY3VycmVudCBlbGVtZW50IGlzIGFscmVhZHkgZGV0YWNoZWQgZnJvbSB0aGUgRE9NLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSwgcGFyZW50Vk5vZGUsIHNraXBSZW1vdmUpIHtcblx0bGV0IHI7XG5cdGlmIChvcHRpb25zLnVubW91bnQpIG9wdGlvbnMudW5tb3VudCh2bm9kZSk7XG5cblx0aWYgKChyID0gdm5vZGUucmVmKSkge1xuXHRcdGlmICghci5jdXJyZW50IHx8IHIuY3VycmVudCA9PT0gdm5vZGUuX2RvbSkgYXBwbHlSZWYociwgbnVsbCwgcGFyZW50Vk5vZGUpO1xuXHR9XG5cblx0bGV0IGRvbTtcblx0aWYgKCFza2lwUmVtb3ZlICYmIHR5cGVvZiB2bm9kZS50eXBlICE9ICdmdW5jdGlvbicpIHtcblx0XHRza2lwUmVtb3ZlID0gKGRvbSA9IHZub2RlLl9kb20pICE9IG51bGw7XG5cdH1cblxuXHQvLyBNdXN0IGJlIHNldCB0byBgdW5kZWZpbmVkYCB0byBwcm9wZXJseSBjbGVhbiB1cCBgX25leHREb21gXG5cdC8vIGZvciB3aGljaCBgbnVsbGAgaXMgYSB2YWxpZCB2YWx1ZS4gU2VlIGNvbW1lbnQgaW4gYGNyZWF0ZS1lbGVtZW50LmpzYFxuXHR2bm9kZS5fZG9tID0gdm5vZGUuX25leHREb20gPSB1bmRlZmluZWQ7XG5cblx0aWYgKChyID0gdm5vZGUuX2NvbXBvbmVudCkgIT0gbnVsbCkge1xuXHRcdGlmIChyLmNvbXBvbmVudFdpbGxVbm1vdW50KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgcGFyZW50Vk5vZGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHIuYmFzZSA9IHIuX3BhcmVudERvbSA9IG51bGw7XG5cdH1cblxuXHRpZiAoKHIgPSB2bm9kZS5fY2hpbGRyZW4pKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAocltpXSkgdW5tb3VudChyW2ldLCBwYXJlbnRWTm9kZSwgc2tpcFJlbW92ZSk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGRvbSAhPSBudWxsKSByZW1vdmVOb2RlKGRvbSk7XG59XG5cbi8qKiBUaGUgYC5yZW5kZXIoKWAgbWV0aG9kIGZvciBhIFBGQyBiYWNraW5nIGluc3RhbmNlLiAqL1xuZnVuY3Rpb24gZG9SZW5kZXIocHJvcHMsIHN0YXRlLCBjb250ZXh0KSB7XG5cdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KTtcbn1cbiIsImltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBjcmVhdGVWTm9kZSB9IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xuXG4vKipcbiAqIENsb25lcyB0aGUgZ2l2ZW4gVk5vZGUsIG9wdGlvbmFsbHkgYWRkaW5nIGF0dHJpYnV0ZXMvcHJvcHMgYW5kIHJlcGxhY2luZyBpdHMgY2hpbGRyZW4uXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBET00gZWxlbWVudCB0byBjbG9uZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIEF0dHJpYnV0ZXMvcHJvcHMgdG8gYWRkIHdoZW4gY2xvbmluZ1xuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbj59IHJlc3QgQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHdpbGwgYmUgdXNlZCBhcyByZXBsYWNlbWVudCBjaGlsZHJlbi5cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lRWxlbWVudCh2bm9kZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG5cdGxldCBub3JtYWxpemVkUHJvcHMgPSBhc3NpZ24oe30sIHZub2RlLnByb3BzKSxcblx0XHRrZXksXG5cdFx0cmVmLFxuXHRcdGk7XG5cdGZvciAoaSBpbiBwcm9wcykge1xuXHRcdGlmIChpID09ICdrZXknKSBrZXkgPSBwcm9wc1tpXTtcblx0XHRlbHNlIGlmIChpID09ICdyZWYnKSByZWYgPSBwcm9wc1tpXTtcblx0XHRlbHNlIG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHByb3BzW2ldO1xuXHR9XG5cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzKSB7XG5cdFx0Y2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuXHRcdGZvciAoaSA9IDM7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNoaWxkcmVuLnB1c2goYXJndW1lbnRzW2ldKTtcblx0XHR9XG5cdH1cblx0aWYgKGNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRub3JtYWxpemVkUHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcblx0fVxuXG5cdHJldHVybiBjcmVhdGVWTm9kZShcblx0XHR2bm9kZS50eXBlLFxuXHRcdG5vcm1hbGl6ZWRQcm9wcyxcblx0XHRrZXkgfHwgdm5vZGUua2V5LFxuXHRcdHJlZiB8fCB2bm9kZS5yZWYsXG5cdFx0bnVsbFxuXHQpO1xufVxuIiwiLy8gaW1wb3J0IHsgZW5xdWV1ZVJlbmRlciB9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5cbi8qKlxuICogRmluZCB0aGUgY2xvc2VzdCBlcnJvciBib3VuZGFyeSB0byBhIHRocm93biBlcnJvciBhbmQgY2FsbCBpdFxuICogQHBhcmFtIHtvYmplY3R9IGVycm9yIFRoZSB0aHJvd24gdmFsdWVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdm5vZGUgdGhhdCB0aHJld1xuICogdGhlIGVycm9yIHRoYXQgd2FzIGNhdWdodCAoZXhjZXB0IGZvciB1bm1vdW50aW5nIHdoZW4gdGhpcyBwYXJhbWV0ZXJcbiAqIGlzIHRoZSBoaWdoZXN0IHBhcmVudCB0aGF0IHdhcyBiZWluZyB1bm1vdW50ZWQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2hFcnJvcihlcnJvciwgdm5vZGUpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4uL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xuXHRsZXQgY29tcG9uZW50LCBjdG9yLCBoYW5kbGVkO1xuXG5cdGNvbnN0IHdhc0h5ZHJhdGluZyA9IHZub2RlLl9oeWRyYXRpbmc7XG5cblx0Zm9yICg7ICh2bm9kZSA9IHZub2RlLl9wYXJlbnQpOyApIHtcblx0XHRpZiAoKGNvbXBvbmVudCA9IHZub2RlLl9jb21wb25lbnQpICYmICFjb21wb25lbnQuX3Byb2Nlc3NpbmdFeGNlcHRpb24pIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGN0b3IgPSBjb21wb25lbnQuY29uc3RydWN0b3I7XG5cblx0XHRcdFx0aWYgKGN0b3IgJiYgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvbXBvbmVudC5zZXRTdGF0ZShjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikpO1xuXHRcdFx0XHRcdGhhbmRsZWQgPSBjb21wb25lbnQuX2RpcnR5O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRDYXRjaCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Y29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoKGVycm9yKTtcblx0XHRcdFx0XHRoYW5kbGVkID0gY29tcG9uZW50Ll9kaXJ0eTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRoaXMgaXMgYW4gZXJyb3IgYm91bmRhcnkuIE1hcmsgaXQgYXMgaGF2aW5nIGJhaWxlZCBvdXQsIGFuZCB3aGV0aGVyIGl0IHdhcyBtaWQtaHlkcmF0aW9uLlxuXHRcdFx0XHRpZiAoaGFuZGxlZCkge1xuXHRcdFx0XHRcdHZub2RlLl9oeWRyYXRpbmcgPSB3YXNIeWRyYXRpbmc7XG5cdFx0XHRcdFx0cmV0dXJuIChjb21wb25lbnQuX3BlbmRpbmdFcnJvciA9IGNvbXBvbmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0ZXJyb3IgPSBlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRocm93IGVycm9yO1xufVxuIiwiaW1wb3J0IHsgaCwgcmVuZGVyLCBDb21wb25lbnQgfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9pbmRleC5jc3MnO1xyXG5cclxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnN0YXRlID0ge31cclxuICB9XHJcbiAgcmVuZGVyKHByb3BzLCBzdGF0ZSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGl0bGVcIj5IZWxsbyB7cHJvcHMuYXBwLmlkfSE8L2gxPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmxldCBhcHBzID0gd2luZG93Lm1vd3BfYXRvbW9zO1xyXG5hcHBzLmZvckVhY2goYXBwID0+IHtcclxuICByZW5kZXIoPEFwcCBhcHA9e2FwcH0gLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFwcC5pZCkpXHJcbn0pOyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZVxuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2luZGV4LmpzeFwiKTtcbi8vIFRoaXMgZW50cnkgbW9kdWxlIHVzZWQgJ2V4cG9ydHMnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbiJdLCJzb3VyY2VSb290IjoiIn0=